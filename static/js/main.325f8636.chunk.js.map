{"version":3,"sources":["store/modules/notification.js","services/agent.service.js","store/constant.js","store/modules/modal.js","store/modules/timeline.js","store/modules/experience.js","store/modules/comment.js","store/modules/account.js","store/modules/location.js","constants/accountType.js","store/modules/instantJob.js","store/modules/job.js","store/modules/auth.js","store/modules/admin.js","store/modules/contact.js","store/modules/emojiPicker.js","store/modules/company.js","store/modules/review.js","store/modules/userSkill.js","store/modules/education.js","store/modules/util.js","components/AppLoading.js","store/modules/common.js","store/modules/error.js","store/modules/chat.js","store/modules/index.js","store/middlewares/redirect-middleware.js","store/middlewares/index.js","store/index.js","components/AppAlert.js","App.js","serviceWorker.js","index.js","pages/error-page/error-boundary.jsx"],"names":["notification","type","title","message","MESSAGE_DISPLAYED","MESSAGE_CLEARED","reducer","state","action","payload","fetching","offline","messageDisplayed","data","notificationType","showMessage","dispatch","serializeError","clearMessage","error","Array","isArray","length","join","response","body","bodyError","superagent","superagentPromise","_superagent","global","Promise","API_ROOT","console","log","process","accessToken","responseBody","res","getAuthToken","auth","JSON","parse","window","localStorage","getItem","tokenPlugin","req","set","on","status","requests","url","del","use","then","get","put","post","Auth","logError","isAuth","setToken","saveAuthData","_user","setItem","stringify","saveFirstTime","loggedInOnce","logout","removeItem","current","isAdmin","user","role","login","email","password","register","checkValidEmail","forgotPassword","updatePassword","shortCode","confirmPassword","resetPassword","sendResetToken","verifyResetToken","token","verifyAccount","code","User","save","load","edit","delete","id","view","Sector","search","param","sector","Account","getProfileInfo","updateCompanyInfo","updateBiography","biography","updateProfile","profile","updateExperience","experience","contactInfo","loi","hobbies","interests","image","images","JobExperience","Job","loadAll","apply","applicants","acceptApplication","applicationId","suspendApplication","Education","UserSkill","userskill","Country","State","loadByCountry","countryid","Lga","loadByState","stateid","JobVacancy","jobvacancy","pageNumber","approve","approval","reject","rejection","Outlet","outlet","Poll","poll","ScheduleMeeting","schedulemeeting","startmeeting","endmeeting","Company","InstantJob","instantjob","jobid","loadApplicants","jobId","loadAllInstantJobs","page","take","instantJob","accept","Review","review","loadByApplicant","applicantId","limit","ContractType","Qualification","Skill","ServiceGroup","URLSearchParams","toString","loadForService","Service","Post","loadByUserId","like","dislike","postCount","postCountByUser","userId","Comment","Contact","loadContacts","loadRequests","add","_accessToken","MESSAGE_TYPE","SUCCESS","ERROR","INFO","WARNING","modal","name","visible","MODAL_OPEN","MODAL_CLOSED","openModal","onModalOpen","closeModal","timeline","loadingPosts","posts","meta","ids","postsByUserId","postByPostId","totalPostCount","PostCountByUser","commentIds","LOADING_POSTS","LOAD_POSTS","LOAD_POST_BY_POSTID","LOAD_POSTS_BY_USERID","LOAD_TOTAL_POST_COUNT","LOAD_USER_POST_COUNT","POSTS_EDITED","CREATE_POST","DELETE_POST","DISLIKE_POST","LOAD_COMMENT_IDS_BY_POSTID","LIKE_POST","ADD_COMMENT_ID","REMOVE_COMMENT_ID","uniquePostIds","idArray","from","Set","map","push","normalizedPosts","reduce","acc","loading","commentDataInPost","postID","postId","loadingType","likedPostId","likedPost","likes","dislikes","dislikedPostId","dislikedPost","updatedPost","Object","assign","postImage","itemCount","total","deletedId","updatedIdArray","splice","indexOf","postIdToAddTo","commentIdToAdd","commentId","postIdToRemoveFrom","commentIdToRemove","indexOfCommentId","updatedCommentIds","postDeleted","loadCommentIdsByPostId","addCommentId","removeCommentId","createPost","agent","editPost","loadPosts","forEach","commentsLoaded","comments","commentCount","viewPost","deletePost","deleteType","statusCode","likePost","dislikePost","submitting","updatedOrDeleted","LOAD_EXPERIENCE","LOADING","SUBMITTING","LOADING_ERROR","experienceLoaded","loadError","isSubmitting","createExperience","loadProfileInfo","comment","LOAD_COMMENT","COMMENT_LIKED","COMMENT_DISLIKED","LOADING_COMMENTS","LOAD_COMMENTS_BY_POSTID","COMMENT_CREATED","COMMENT_DELETED","commentMeta","normalizedComments","commentToLikeId","commentToDislikeId","loadingComment","removeDeletedComment","postComment","loadComments","likeComment","commentLiked","dislikeComment","commentDisliked","deleteComment","account","profileInfo","firstName","lastName","imageUrl","address","companyName","location","phoneNumber","accountType","dateOfBirth","city","lga","postalCode","country","skills","experiences","educations","LOAD_PROFILE_INFO","LOAD_PROFILE_INFO_BY_USER","LOAD_PROFILE_INFO_ERROR","DELETE_EXPERIENCE","DELETE_EDUCATION","newEducations","filter","edu","newExperiences","exp","profileInfoLoaded","profileInfoLoadedError","updatePersonalProfile","updateLOI","updateContactInfo","updateProfessionOfInterest","updateUserHobies","updateHobies","updateProfilePicture","updateProfilePortfolio","loadAccountByUser","getByID","deleteExperience","deleteProfileExperience","deleteEducation","deleteProfileEducation","countries","states","lgas","organizationNames","COUNTRY","STATE","LGA","ORGANIZATIONNAME","loadCountry","loadStates","loadLga","ACCOUNT_TYPE","CORPORATE","ARTISAN","JOB_SEEKER","INSTANT_HIRE","Initial_State","instantjobs","allCurrentInstantJobs","applicantProfile","CREATE_INSTANT_JOB","LOAD_INSTANT_JOBS","LOAD_INSTANT_JOB","LOAD_ALL_INSTANT_JOBS","LOAD_INSTANT_APPLICANTS","LOAD_APPLICANT_INFO","onLoadInstantJobs","isRequestLoading","createInstantJob","loadInstantJobs","fetchAllInstantJobs","acceptApplicant","reload","rejectApplicant","loadInstantJob","applyInstantJob","editInstantJob","deleteInstantJob","initialState","editingJob","loadingApplicants","allJobs","jobs","jobDetail","jobApplicationResponse","jobApplicationRequest","EDITING_JOB","EDIT_JOB_SUCCESS","LOAD_ALL_JOBS","LOAD_JOBS","LOAD_SINGLE_JOB","GET_JOB_DETAIL","APPLY_JOB_REQUEST","APPLY_JOB","LOADING_APPLICANTS","GET_JOB_APPLICANTS","LOAD_JOBS_ERROR","jobsLoadedError","loadAllJobs","loadJobs","viewJob","createJob","jobSingleLoaded","editJob","applyJob","viewApplicant","actionGetApplicant","authData","currentUser","REGISTERED","LOGGED_IN","LOGGED_OUT","FORGOT_PASSWORD","UPDATE_PASSWORD","registerUser","loginUser","onLogin","forgotPasswordUser","updateUserPassword","userLoggedIn","OnLogout","admin","adminLoading","contractTypes","qualifications","serviceGroups","serviceGroupsForServiceComponent","services","ADMIN_LOADING","UPDATE_PROFILE","LOAD_ADMIN_ERROR","LOAD_CONTRACT_TYPES","LOAD_SKILLS","LOAD_QUALIFICATIONS","LOAD_SERVICES","LOAD_SERVICE_GROUPS","LOAD_SERVICE_GROUPS_FOR_SERVICE","CREATE_CONTRACT_TYPE","UPDATE_CONTRACT_TYPE","DELETE_CONTRACT_TYPE","CREATE_SKILLS","UPDATE_SKILLS","DELETE_SKILLS","CREATE_QUALIFICATION","UPDATE_QUALIFICATION","DELETE_QUALIFICATION","CREATE_SERVICE_GROUP","UPDATE_SERVICE_GROUP","DELETE_SERVICE_GROUP","CREATE_SERVICE","UPDATE_SERVICE","DELETE_SERVICE","messsage","newServiceGroupArray","serviceGroup","serviceArray","item","groupId","group","newServiceArray","service","updatedService","description","adminLoadedError","getContractTypes","createContractType","actionCreateContractType","updateContractType","c","deleteContractType","getSkills","actionLoadSkills","createSkills","actionCreateSkills","updateSkills","deleteSkills","getQualifications","actionLoadQualification","createQualification","actionCreateQualification","updateQualification","deleteQualification","loadServiceGroups","actionLoadServiceGroups","loadServiceGroupsForServiceComponent","actionLoadServiceGroupsForService","createServiceGroup","actionCreateServiceGroup","updateServiceGroup","globalFilter","includes","actionUpdateServiceGroup","loadServices","deleteServiceGroup","actionLoadServices","createService","actionCreateService","updateService","actionUpdateService","deleteService","contact","loadingContact","pendingRequests","freeUsers","contacts","LOAD_FREE_USERS","LOAD_CONTACTS","LOAD_PENDING_REQUESTS","LOADING_CONTACT","CONTACT_ADDED","CONTACT_DELETED","REMOVE_PENDING","REQUEST_SENT","uniqueFreeIds","normalizedFreeUsers","freeUser","contactArray","uniqueContactIds","normalizedContacts","sentRequestId","updatedRequestArray","pendingArray","uniquePendingIds","normalizedPending","pendingRequest","pendingId","updatedPendingArray","isError","removeFromPending","loadFreeUsers","loadPendingRequests","sendContactRequest","contactId","removeContact","contactDeleted","acceptRequest","accountDetails","rejectRequest","emoji","EMOJI_PICKER_OPEN","EMOJI_PICKER_CLOSED","openEmojiPicker","onEmojiPickerOpen","closeEmojiPicker","INITIAL_STATE","companyInfo","logo","yearOfEstablishment","contactPerson","noOfEmployees","industry","registrationNo","website","stateName","stateId","countryId","countryName","contractPerson","LOAD_COMPANY_INFO","LOAD_COMPANY_INFO_ERROR","companyInfoLoaded","reviews","CREATE_REVIEW","LOAD_REVIEWS","LOAD_APPLICANT_REVIEW","createReview","loadApplicantReviews","userSkill","UPDATE_USER_SKILL","LOAD_USER_SKILL","DELETE_USER_SKILL","USER_SKILL_ERROR","userSkillError","createSkill","institution","qualification","course","yearOfGraduation","UPDATE_EDUCATION","LOAD_EDUCATION","LOADING_EDUCATION","LOAD_EDUCATION_ERROR","isLoading","createUserEducation","educationLoadedError","createEducation","education","updateEducation","LOAD_REQUEST","LOAD_COUNTRIES","LOAD_STATES","LOAD_LGA","LOAD_ERROR","loadingFailure","fetchCountries","AppLoading","common","routeRestrictedMode","ROUTE_RESTRICTED_MODE","APP_OFFLINE","showChatModal","TOGGLE_CHAT_MODAL","appReducer","history","combineReducers","router","connectRouter","company","job","util","emojiPicker","chat","redirectMiddleware","getState","next","redirectMiddlewares","createBrowserHistory","AppAlert","toast","useRef","useSelector","useEffect","ref","show","severity","summary","detail","life","AppRouter","React","lazy","App","Suspense","fallback","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","preloadedState","store","Component","createStore","composeWithDevTools","applyMiddleware","thunk","routerMiddleware","customeMiddlewares","ReactDOM","render","component","document","getElementById","URL","href","origin","addEventListener","fetch","headers","contentType","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.325f8636.chunk.js","sourcesContent":["// initial values\r\nconst notification = {\r\n    type: \"\", // takes success, error, info, warning\r\n    title: \"\",\r\n    message: \"\"\r\n};\r\n\r\n\r\n// Action types\r\nconst MESSAGE_DISPLAYED = 'app/notification/MESSAGE_DISPLAYED';\r\nconst MESSAGE_CLEARED = 'app/notification/MESSAGE_CLEARED ';\r\n\r\n// Reducer\r\nexport default function reducer(state = notification, action = {}) {\r\n    switch (action.type) {\r\n        case MESSAGE_DISPLAYED: return {\r\n                ...state,\r\n                ...action.payload,\r\n                fetching: false\r\n            };\r\n\r\n        case MESSAGE_CLEARED: return {\r\n                ...state,\r\n                type: \"\",\r\n                title: \"\",\r\n                message: \"\",\r\n                fetching: false,\r\n                offline: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// action creators\r\nexport function messageDisplayed(data) {\r\n    if (! data) {\r\n        return;\r\n    }\r\n\r\n    return {type: MESSAGE_DISPLAYED, payload: data, notificationType: data.type};\r\n}\r\n\r\n\r\nexport function messageCleared() {\r\n    return {type: MESSAGE_CLEARED};\r\n}\r\n\r\nexport function offlineMessageDisplayed() {\r\n    return {type: MESSAGE_DISPLAYED};\r\n}\r\n\r\n\r\n// actions\r\nexport function showMessage(data) {\r\n    if (data && data.type === 'error') {\r\n        return dispatch => {\r\n            dispatch(messageDisplayed({\r\n                type: 'error',\r\n                message: serializeError(data.message),\r\n                title: data.title || \"An error occured\"\r\n            }))\r\n        }\r\n    }\r\n\r\n    return dispatch => {\r\n        dispatch(messageDisplayed(data))\r\n    }\r\n}\r\n\r\n\r\nexport function clearMessage() {\r\n    return dispatch => {\r\n        dispatch(messageCleared())\r\n    }\r\n}\r\n\r\n\r\nfunction serializeError(error) {\r\n    if (typeof error === 'string') {\r\n        return error\r\n    }\r\n\r\n\r\n    if (Array.isArray(error) && error.length > 0) {\r\n        return error.join(\", \");\r\n    }\r\n\r\n\r\n    if (error.response && typeof error.response === 'object' && error.response !== null) {\r\n        const {body} = error.response;\r\n        if (typeof body === 'object' && body !== null) {\r\n            const {message, error: bodyError} = body;\r\n            if (typeof message === 'string' && message !== null) {\r\n                return message\r\n            }\r\n\r\n            if (Array.isArray(message) && message.length > 0) {\r\n                return message.join(\", \");\r\n            }\r\n\r\n            if (typeof bodyError === 'string' && bodyError !== null) {\r\n                return bodyError\r\n            }\r\n\r\n            if (Array.isArray(bodyError) && bodyError.length > 0) {\r\n                return bodyError.join(\", \");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    if (error.message && typeof error.message === 'string' && error.message !== null) {\r\n        return error.message;\r\n    }\r\n\r\n    return \"An error occurred, please try again later\"\r\n}\r\n","import request from \"superagent\";\r\nimport _superagent from \"superagent\";\r\nimport superagentPromise from \"superagent-promise\";\r\n\r\nconst superagent = superagentPromise(_superagent, global.Promise);\r\n\r\n// export const API_ROOT = process.env.NODE_ENV === \"development\" ? 'http://localhost:4500' : \"https://jobplicant-api.herokuapp.com\";\r\nexport const API_ROOT = \"https://jobplicant-api.herokuapp.com\";\r\n\r\nconsole.log('API_ROOT', API_ROOT);\r\nconsole.log(\"environmental variables\", process.env);\r\nexport const IMAGE_URL = API_ROOT + '/account/uploads/';\r\n\r\n\r\nlet accessToken = null;\r\nconst responseBody = (res) => res.body;\r\n\r\nconst getAuthToken = () => {\r\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n  const accessToken = auth ? auth.accessToken : null;\r\n  return accessToken;\r\n};\r\n\r\nexport const tokenPlugin = (req) => {\r\n  req.set(\"Accept\", \"application/json\");\r\n\r\n  accessToken = getAuthToken();\r\n  if (accessToken) {\r\n    req.set(\"Authorization\", `Bearer ${accessToken}`);\r\n  }\r\n\r\n  req.on(\"response\", function (res) {\r\n    if (res.status === 401) {\r\n    }\r\n  });\r\n};\r\n\r\nconst requests = {\r\n  del: (url) =>\r\n    superagent.del(`${API_ROOT}${url}`).use(tokenPlugin).then(responseBody),\r\n  get: (url) =>\r\n    superagent.get(`${API_ROOT}${url}`).use(tokenPlugin).then(responseBody),\r\n  put: (url, body) =>\r\n    superagent\r\n      .put(`${API_ROOT}${url}`, body)\r\n      .use(tokenPlugin)\r\n      .then(responseBody),\r\n  post: (url, body) =>\r\n    superagent\r\n      .post(`${API_ROOT}${url}`, body)\r\n      .use(tokenPlugin)\r\n      .then(responseBody),\r\n};\r\n\r\nconst Auth = {\r\n  logError: (data) => requests.post(\"/v1/log/error\", { data }),\r\n  isAuth: () => {\r\n    const accessToken = getAuthToken();\r\n    return !!accessToken;\r\n  },\r\n  setToken: () => {\r\n    const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n    accessToken = auth.accessToken;\r\n  },\r\n  saveAuthData: (_user) => {\r\n    window.localStorage.setItem(\"auth\", JSON.stringify(_user));\r\n    accessToken = _user.accessToken;\r\n  },\r\n  saveFirstTime: () => {\r\n    window.localStorage.setItem(\"ftime\", true);\r\n  },\r\n  loggedInOnce: () => {\r\n    return !!window.localStorage.getItem(\"ftime\");\r\n  },\r\n  logout: () => {\r\n    window.localStorage.removeItem(\"auth\");\r\n    accessToken = null;\r\n  },\r\n  current: () => JSON.parse(window.localStorage.getItem(\"auth\")),\r\n  isAdmin: () => {\r\n    const user = Auth.current();\r\n    return user?.role === ('Super-admin' || \"Developer\");\r\n  },\r\n  login: (email, password, type) =>\r\n    requests.post(\"/auth/signIn\", { email, password, type }),\r\n  register: (data) => requests.post(\"/auth/signUp\", data),\r\n  checkValidEmail: (email) =>\r\n    requests.post(`/account/email/is-valid`, { email }),\r\n  forgotPassword: (email) =>\r\n    requests.put(`/auth/send-forget-password-email`, { email }),\r\n  updatePassword: (data) => {\r\n    const { shortCode, email, password, confirmPassword } = data;\r\n    requests.put(`/auth/change-password-email/${shortCode}/${email}`, {\r\n      password,\r\n      confirmPassword,\r\n    });\r\n  },\r\n  resetPassword: (email, password) =>\r\n    requests.post(`/ account / password / reset`, { email, password }),\r\n  sendResetToken: (email) =>\r\n    requests.post(`/ account / password / email`, { email }),\r\n  verifyResetToken: (email, token) =>\r\n    requests.post(`/ account / password / verify - token`, { email, token }),\r\n  verifyAccount: (code) => requests.get(`/verification/signup/${code}`),\r\n};\r\n\r\nconst User = {\r\n  save: (user) => requests.post(\"/user\", user),\r\n  load: () => requests.get(\"/user\"),\r\n  edit: (user) => requests.put(\"/user\", user),\r\n  delete: (id) => requests.del(`/ user / ${id}`),\r\n  view: (id) => requests.get(`/ user / ${id}`),\r\n};\r\n\r\nconst Sector = {\r\n  save: (data) => requests.post(\"/sector\", data),\r\n  load: () => requests.get(\"/sector\"),\r\n  search: (param) => requests.get(\"/sector\" + param),\r\n  edit: (sector) => requests.put(\"/sector\", sector),\r\n  delete: (id) => requests.del(`/ sector / ${id}`),\r\n  view: (id) => requests.get(`/ sector / ${id}`),\r\n};\r\n\r\nconst Account = {\r\n  getProfileInfo: () => requests.get(`/accounts/profile/active`),\r\n  updateCompanyInfo: (data) => requests.put(\"/accounts/company-info\", data),\r\n  updateBiography: (biography) => requests.put(\"/accounts/bio\", biography),\r\n  updateProfile: (profile) => requests.put(\"/accounts/profile\", profile), //To update personal info e.g firstname, lastname etc... \r\n  updateExperience: (experience) =>\r\n    requests.put(\"/accounts/job-experience\", experience),\r\n  getProfileInfo: () =>\r\n    requests.get(`/accounts/profile/active`),\r\n  updateBiography: (biography) =>\r\n    requests.put('/accounts/bio', biography),\r\n  updateExperience: (experience) =>\r\n    requests.put('/accounts/job-experience', experience),\r\n  updateContactInfo: (contactInfo) =>\r\n    requests.put(\"/accounts/contact-info\", contactInfo),\r\n  updateLOI: (loi) =>\r\n    requests.put(\"/accounts/location\", { \"locations\": loi }),\r\n  updateHobies: (hobbies) => requests.put(\"/accounts/hobbies\", { hobbies }),\r\n  updateProfessionOfInterest: (interests) =>\r\n    requests.put(\"/accounts/interests\", { \"interest\": interests }),\r\n  updateProfilePicture: (image) => requests.put(\"/accounts/upload-avatar\", image),\r\n  updateProfilePortfolio: (images) => requests.put(\"/accounts/upload-portfolios\", images),\r\n  load: (email) => requests.get(`/account/getbyemail/${email}`),\r\n  getByID: (id) => requests.get(`/accounts/${id}`),\r\n  verifyAccount: (id) => requests.get(`/account/${id}`),\r\n};\r\n\r\nconst JobExperience = {\r\n  save: (data) => requests.post(\"/job-experience\", data),\r\n  load: () => requests.get(\"/job-experience\"),\r\n  search: (param) => requests.get(\"/job-experience\" + param),\r\n  edit: (id, data) => requests.put(`/job-experience/${id}`, data),\r\n  delete: (id) => requests.del(`/job-experience/${id}`),\r\n  view: (id) => requests.get(`/job-experience/ ${id}`),\r\n};\r\n\r\nconst Job = {\r\n  loadAll: () => requests.get(`/job/all`),\r\n  save: (data) => requests.post(\"/job\", data),\r\n  edit: (id, data) => requests.put(`/job/${id}`, data),\r\n  load: () => requests.get(\"/job\"),\r\n  view: (id) => requests.get(`/job/${id}`),\r\n  apply: (id, data) => requests.post(`/job/${id}/apply`, data),\r\n  applicants: (id) => requests.get(`/job/${id}/applicants`),\r\n  acceptApplication: (applicationId, data) => requests.put(`/job/${applicationId}/application/accept`, data),\r\n  suspendApplication: (applicationId, data) => requests.put(`/job/${applicationId}/application/suspend`, data)\r\n}\r\n\r\n//education service api\r\nconst Education = {\r\n  save: (data) => requests.post(\"/education\", data),\r\n  load: () => requests.get(\"/education\"),\r\n  search: (param) => requests.get(\"/education\" + param),\r\n  edit: (id, data) => requests.put(`/education/${id}`, data),\r\n  delete: (id) => requests.del(`/education/${id}`),\r\n  view: (id) => requests.get(`/education/${id}`),\r\n}\r\n\r\nconst UserSkill = {\r\n  save: (userskill) => requests.post(\"/user-skill\", { \"skills\": userskill }),\r\n  load: () => requests.get(\"/user-skill\"),\r\n  delete: (id) => requests.del(`/user-skill/${id}`),\r\n};\r\n\r\nconst Country = {\r\n  load: () => requests.get(\"/country\"),\r\n};\r\n\r\nconst State = {\r\n  loadByCountry: (countryid) =>\r\n    requests.get(`/state/getbycountry/${countryid}`),\r\n};\r\nconst Lga = {\r\n  loadByState: (stateid) => requests.get(`/lga/getbystate/${stateid}`),\r\n};\r\n\r\nconst JobVacancy = {\r\n  save: (jobvacancy) => requests.post(\"/jobvacancy\", jobvacancy),\r\n  load: (pageNumber) =>\r\n    requests.get(\"/jobvacancy/applications/active\", pageNumber),\r\n  loadAll: (pageNumber) => requests.get(\"/jobvacancy\", pageNumber),\r\n  view: (id) => requests.get(`/ jobvacancy / ${id}`),\r\n  edit: (id, jobvacancy) => requests.put(`/ jobvacancy / ${id}`, jobvacancy),\r\n  delete: (id) => requests.del(`/ jobvacancy / ${id}`),\r\n  approve: (id, approval) =>\r\n    requests.put(`/ jobvacancy / approve / ${id}`, approval),\r\n  reject: (id, rejection) =>\r\n    requests.put(`/ jobvacancy / reject / ${id}`, rejection),\r\n};\r\n\r\nconst Outlet = {\r\n  save: (outlet) => requests.post(\"/outlet\", outlet),\r\n  load: (pageNumber) => requests.get(\"/outlet/apps/active\", pageNumber),\r\n  view: (id) => requests.get(`/ outlet / ${id}`),\r\n  edit: (id, outlet) => requests.put(`/ outlet / ${id}`, outlet),\r\n  delete: (id) => requests.del(`/ outlet / ${id}`),\r\n};\r\n\r\nconst Poll = {\r\n  save: (poll) => requests.post(\"/poll\", poll),\r\n  load: (pageNumber) => requests.get(\"/poll\", pageNumber),\r\n  view: (id) => requests.get(`/ poll / ${id}`),\r\n  edit: (id, poll) => requests.put(`/ poll / ${id}`, poll),\r\n  delete: (id) => requests.del(`/ poll / ${id}`),\r\n};\r\n\r\nconst ScheduleMeeting = {\r\n  save: (schedulemeeting) =>\r\n    requests.post(\"/meeting/schedule-meeting\", schedulemeeting),\r\n  load: () => requests.get(\"/meeting\"),\r\n  view: (id) => requests.get(`/ meeting / ${id}`),\r\n  edit: (id, schedulemeeting) =>\r\n    requests.put(`/ meeting / ${id}`, schedulemeeting),\r\n  startmeeting: (id, startmeeting) =>\r\n    requests.put(`/ meeting / start - meeting${id}`, startmeeting),\r\n  endmeeting: (id, endmeeting) =>\r\n    requests.put(`/ meeting / end - meeting${id}`, endmeeting),\r\n  delete: (id) => requests.del(`/ meeting / ${id}`),\r\n};\r\n\r\nconst Company = {\r\n  load: () => requests.get(`/company`),\r\n  put: (id, data) => requests.put(`/company/${id}`, data),\r\n\r\n}\r\n\r\nconst InstantJob = {\r\n  save: (instantjob) => requests.post(\"/instant-job\", instantjob),\r\n  apply: (jobid) => requests.post(`/instant-job/${jobid}/apply`, null),\r\n  load: () => requests.get(`/instant-job`),\r\n  loadApplicants: (jobId) =>\r\n    requests.get(`/instant-job/${jobId}/applicants`),\r\n  loadAllInstantJobs: (page, take) =>\r\n    requests.get(\"/instant-job/current\", page, take),\r\n  view: (id) => requests.get(`/instant-job/${id}`),\r\n  edit: (id, instantJob) => requests.put(`/instant-job/${id}`, instantJob),\r\n  delete: (id) => requests.del(`/instant-job/${id}`),\r\n  accept: (id) =>\r\n    requests.put(`/instant-job/${id}/application/accept`, null),\r\n  reject: (id) =>\r\n    requests.put(`/instant-job/${id}/application/reject`, null),\r\n  reject: (id) =>\r\n    requests.put(`/instant-job/${id}/application/reject`, null),\r\n};\r\n\r\nconst Review = {\r\n  save: (review) => requests.post(\"/review\", review),\r\n  load: () => requests.get(`/review`),\r\n  loadByApplicant: (applicantId, page, limit) => {\r\n    const url = `/review/${applicantId}/all?page=${page}&limit=${limit}`;\r\n    return requests.get(url);\r\n  },\r\n  edit: (id) => requests.put(`review/edit/${id}`, id),\r\n\r\n};\r\n\r\nconst ContractType = {\r\n  save: (data) => requests.post(\"/contract-type\", data),\r\n  load: () => requests.get(\"/contract-type\",),\r\n  view: (id) => requests.get(`/contract-type/${id}`),\r\n  edit: (id, data) => requests.put(`/contract-type/${id}`, data),\r\n  delete: (id) => requests.del(`/contract-type/${id}`),\r\n}\r\n\r\nconst Qualification = {\r\n  save: (data) => requests.post(\"/qualification\", data),\r\n  load: () => requests.get(\"/qualification\",),\r\n  view: (id) => requests.get(`/qualification/${id}`),\r\n  edit: (id, data) => requests.put(`/qualification/${id}`, data),\r\n  delete: (id) => requests.del(`/qualification/${id}`),\r\n}\r\n\r\nconst Skill = {\r\n  save: (data) => requests.post(\"/skill\", data),\r\n  load: () => requests.get(\"/skill\",),\r\n  view: (id) => requests.get(`/skill/${id}`),\r\n  edit: (id, data) => requests.put(`/skill/${id}`, data),\r\n  delete: (id) => requests.del(`/skill/${id}`),\r\n}\r\n\r\nconst ServiceGroup = {\r\n  save: (data) => requests.post(\"/service-group\", data),\r\n  load: (page, limit, search) => requests.get(`/service-group?${new URLSearchParams({ page: page, limit: limit, search: search }).toString()}`),\r\n  loadForService: (page, limit, search) => requests.get(`/service-group?${new URLSearchParams({ page: page, limit: limit, search: search }).toString()}`),\r\n  view: (id) => requests.get(`/service-group/${id}`),\r\n  edit: (id, data) => requests.put(`/service-group/${id}`, data),\r\n  delete: (id) => requests.del(`/service-group/${id}`),\r\n}\r\n\r\nconst Service = {\r\n  save: (data) => requests.post(\"/service\", data),\r\n  load: (page, limit, search) => requests.get(`/service?${new URLSearchParams({ page: page, limit: limit, search: search }).toString()}`),\r\n  view: (id) => requests.get(`/service/${id}`),\r\n  edit: (id, data) => requests.put(`/service/${id}`, data),\r\n  delete: (id) => requests.del(`/service/${id}`),\r\n}\r\n\r\nconst Post = {\r\n  save: (data) => requests.post(\"/post\", data),\r\n  edit: (id, data) => requests.put(`/post/${id}`, data),\r\n  load: (page, take) => requests.get(`/post?${new URLSearchParams({ page: page, take: take }).toString()}`),\r\n  loadByUserId: (id, page, take) => requests.get(`/post/user/${id}?${new URLSearchParams({ page: page, take: take }).toString()}`),\r\n  view: (id) => requests.get(`/post/${id}`),\r\n  search: (page, search) => requests.get(\"/post/search\", page, search),\r\n  like: (id) => requests.put(`/post/like/${id}`),\r\n  dislike: (id) => requests.put(`/post/dislike/${id}`),\r\n  postCount: () => requests.get(\"/post/count\"),\r\n  postCountByUser: (userId) => requests.get(`/post/user/${userId}/count`),\r\n  delete: (id) => requests.del(`/post/${id}`)\r\n};\r\n\r\nconst Comment = {\r\n  save: (id, data) => requests.post(`/comment/${id}`, data),\r\n  load: (id, page, take) => requests.get(`/comment/post/${id}?${new URLSearchParams({ page: page, take: take }).toString()}`),\r\n  like: (id) => requests.put(`/comment/like/${id}`),\r\n  dislike: (id) => requests.put(`/comment/dislike/${id}`),\r\n  delete: (id) => requests.del(`/comment/${id}`)\r\n}\r\n\r\nconst Contact = {\r\n  load: (page, limit, search = \"\") => requests.get(`/contact/free?${new URLSearchParams({ page: page, limit: limit, search: search }).toString()}`),\r\n  loadContacts: (page, limit) => requests.get(`/contact?${new URLSearchParams({ page: page, limit: limit }).toString()}`),\r\n  loadRequests: (page, take) => requests.get(`/contact/request/pending?${new URLSearchParams({ page: page, take: take }).toString()}`),\r\n  add: (id) => requests.post(\"/contact\", id),\r\n  delete: (id) => requests.del(`/contact/${id}`),\r\n  accept: (data) => requests.post(\"/contact/accept\", data),\r\n  reject: (id) => requests.del(`/contact/reject/${id}`)\r\n}\r\n\r\nexport default {\r\n  Auth,\r\n  User,\r\n  Outlet,\r\n  Sector,\r\n  Account,\r\n  JobExperience,\r\n  Job,\r\n  Country,\r\n  State,\r\n  Lga,\r\n  JobVacancy,\r\n  ScheduleMeeting,\r\n  Poll,\r\n  Company,\r\n  Education,\r\n  UserSkill,\r\n  InstantJob,\r\n  Post,\r\n  Comment,\r\n  Contact,\r\n  setToken: (_accessToken) => {\r\n    accessToken = _accessToken;\r\n  },\r\n\r\n  ContractType,\r\n  Qualification,\r\n  Skill,\r\n  ServiceGroup,\r\n  Service,\r\n  Review,\r\n};\r\n","export const MESSAGE_TYPE = {\r\n    SUCCESS: \"success\",\r\n    ERROR: \"error\",\r\n    INFO: 'info',\r\n    WARNING: 'warning'\r\n}","import agent from \"services/agent.service\";\r\n\r\n// initial values\r\nconst modal = {\r\n    name: \"\",\r\n    visible: false,\r\n};\r\n\r\n\r\n// Action types\r\nconst MODAL_OPEN = 'MODAL_OPEN';\r\nconst MODAL_CLOSED = 'MODAL_CLOSED';\r\n\r\n\r\n//Action Creator\r\nexport function onModalOpen(name) {\r\n    return { type: MODAL_OPEN, payload: name };\r\n}\r\n\r\nexport function onModalClosed(name) {\r\n    return { type: MODAL_CLOSED, payload: name };\r\n}\r\n\r\n\r\n// Reducer\r\nexport default function reducer(state = modal, action) {\r\n    switch (action.type) {\r\n        case MODAL_OPEN:\r\n            return {\r\n                ...state,\r\n                name: action.payload,\r\n                visible: true,\r\n            };\r\n        case MODAL_CLOSED:\r\n            return {\r\n                ...state,\r\n                name: \"\",\r\n                visible: false,\r\n            };\r\n        default: return state\r\n    }\r\n};\r\n\r\n//Actions\r\nexport function openModal(name) {\r\n    return dispatch => {\r\n        dispatch(onModalOpen(name))\r\n    }\r\n}\r\n\r\n//Actions\r\nexport function closeModal() {\r\n    return dispatch => {\r\n        dispatch(onModalClosed())\r\n    }\r\n}\r\n\r\n","import { showMessage } from \"./notification\";\r\nimport agent from \"../../services/agent.service\";\r\nimport { push } from \"connected-react-router\";\r\nimport { MESSAGE_TYPE } from \"../constant\";\r\nimport { closeModal } from \"./modal\";\r\nimport { commentsLoaded } from \"./comment\";\r\n\r\n// initial values\r\nconst timeline = {\r\n  loadingPosts: \"\",\r\n  posts: { data: {}, meta: {}, ids: [] },\r\n  post: {},\r\n  postsByUserId: [],\r\n  postByPostId: {},\r\n  totalPostCount: 0,\r\n  PostCountByUser: 0,\r\n  error: null,\r\n  commentIds: {}\r\n};\r\n\r\n// Action types\r\nconst LOADING_POSTS = \"LOADING_POSTS\";\r\nconst LOAD_POSTS = \"LOAD_POSTS\";\r\nconst LOAD_POST_BY_POSTID = \"LOAD_POST_BY_POSTID\";\r\nconst LOAD_POSTS_BY_USERID = \"LOAD_POSTS_BY_USERID\";\r\nconst LOAD_TOTAL_POST_COUNT = \"LOAD_TOTAL_POST_COUNT\";\r\nconst LOAD_USER_POST_COUNT = \"LOAD_USER_POST_COUNT\";\r\nconst POSTS_EDITED = \"POSTS_EDITED\";\r\nconst CREATE_POST = \"CREATE_POST\";\r\nconst DELETE_POST = \"DELETE_POST\";\r\nconst DISLIKE_POST = \"DISLIKE_POST\";\r\nconst LOAD_COMMENT_IDS_BY_POSTID = \"LOAD_COMMENT_IDS_BY_POSTID\";\r\nconst LIKE_POST = \"LIKE_POST\";\r\nconst ERROR = \"ERROR\";\r\nconst ADD_COMMENT_ID = \"ADD_COMMENT_ID\";\r\nconst REMOVE_COMMENT_ID = \"REMOVE_COMMENT_ID\";\r\n\r\n// Reducer\r\nexport default function reducer(state = timeline, action = {}) {\r\n  switch (action.type) {\r\n    case LOADING_POSTS:\r\n      return {\r\n        ...state,\r\n        loadingPosts: action.payload,\r\n        error: null\r\n      };\r\n    case LOAD_POSTS:\r\n      const { data, meta } = action.payload\r\n      const uniquePostIds = [];\r\n      if (state?.loadingPosts === \"loadMore\") {\r\n        const idArray = Array.from(new Set([\r\n          ...state.posts.ids,\r\n          ...data.map(({ id }) => id),\r\n        ]));\r\n        uniquePostIds.push(...idArray)\r\n      }\r\n      else {\r\n        const idArray = Array.from(new Set([\r\n          ...data.map(({ id }) => id),\r\n        ]));\r\n        uniquePostIds.push(...idArray)\r\n      }\r\n      const normalizedPosts = data.reduce((acc, post) => {\r\n        acc[post.id] = post;\r\n        return acc;\r\n      }, {});\r\n\r\n      return {\r\n        ...state,\r\n        posts: {\r\n          ids: uniquePostIds,\r\n          data: {\r\n            ...state.posts.data,\r\n            ...normalizedPosts\r\n          },\r\n          meta: {\r\n            ...meta,\r\n          },\r\n        },\r\n        loading: \"\",\r\n        error: null,\r\n      };\r\n    case LOAD_POST_BY_POSTID:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        posts: {\r\n          data: {\r\n            [action.payload.id]: action.payload\r\n          },\r\n          meta: {},\r\n          ids: [action.payload.id]\r\n        }\r\n      };\r\n    case LOAD_COMMENT_IDS_BY_POSTID:\r\n      const commentDataInPost = action.payload\r\n      const postID = action.postId;\r\n\r\n      //if routing from another page, remove all comments for post else save in idArray \r\n      let idArray = action.loadingType === (postID + \"-loadingMoreComments\") ? state.commentIds[postID] || [] : []\r\n\r\n      const ids = Array.from(new Set([\r\n        ...idArray,\r\n        ...commentDataInPost.map(({ id }) => id)\r\n      ]));\r\n      return {\r\n        ...state,\r\n        loading: \"\",\r\n        error: null,\r\n        commentIds: {\r\n          ...state.commentIds,\r\n          [postID]: ids\r\n        }\r\n      };\r\n    case LIKE_POST:\r\n      const likedPostId = action.payload.id;\r\n      const likedPost = {\r\n        ...state.posts.data[likedPostId],\r\n        likes: action.payload.likes,\r\n        dislikes: action.payload.dislikes\r\n      }\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        posts: {\r\n          ...state.posts,\r\n          data: {\r\n            ...state.posts.data,\r\n            [likedPostId]: { ...likedPost }\r\n          }\r\n        },\r\n      };\r\n\r\n    case DISLIKE_POST:\r\n      const dislikedPostId = action.payload.id;\r\n      const dislikedPost = {\r\n        ...state.posts.data[dislikedPostId],\r\n        likes: action.payload.likes,\r\n        dislikes: action.payload.dislikes\r\n      }\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        posts: {\r\n          ...state.posts,\r\n          data: {\r\n            ...state.posts.data,\r\n            [dislikedPostId]: { ...dislikedPost }\r\n          },\r\n        },\r\n      };\r\n    case LOAD_POSTS_BY_USERID:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        postsByUserId: action.payload,\r\n      };\r\n    case LOAD_TOTAL_POST_COUNT:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        totalPostCount: action.payload,\r\n      };\r\n    case LOAD_USER_POST_COUNT:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        PostCountByUser: action.payload,\r\n      };\r\n    case POSTS_EDITED:\r\n      const updatedPost = Object.assign({}, state.posts.data[action.payload.id]);\r\n      updatedPost.title = action.payload.title;\r\n      updatedPost.body = action.payload.body;\r\n      updatedPost.postImage = action.payload.postImage;\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        posts: {\r\n          ids: [...state.posts.ids],\r\n          data: {\r\n            ...state.posts.data,\r\n            [action.payload.id]: updatedPost\r\n          },\r\n          meta: { ...state.posts.meta },\r\n        },\r\n      };\r\n    case CREATE_POST:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        posts: {\r\n          ids: [action.payload.id, ...state.posts.ids],\r\n          data: { [action.payload.id]: action.payload, ...state.posts.data },\r\n          meta: {\r\n            ...state.posts.meta,\r\n            itemCount: state.posts.meta.itemCount + 1,\r\n            total: state.posts.meta.total + 1\r\n          },\r\n        }\r\n      }\r\n    case DELETE_POST:\r\n      const deletedId = action.id;\r\n      const updatedIdArray = [...state.posts.ids]\r\n      updatedIdArray.splice(state.posts.ids.indexOf(deletedId), 1)\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        posts: {\r\n          ids: updatedIdArray,\r\n          data: { ...state.posts.data },\r\n          meta: {\r\n            ...state.posts.meta,\r\n            total: state.posts.meta.total - 1\r\n          }\r\n        }\r\n      }\r\n    case ADD_COMMENT_ID:\r\n      const postIdToAddTo = action.postId;\r\n      const commentIdToAdd = action.commentId;\r\n      return {\r\n        ...state,\r\n        commentIds: {\r\n          ...state.commentIds,\r\n          [postIdToAddTo]: [\r\n            commentIdToAdd,\r\n            ...state.commentIds[postIdToAddTo] || []\r\n          ]\r\n        }\r\n      };\r\n    case REMOVE_COMMENT_ID:\r\n      const postIdToRemoveFrom = action.postId;\r\n      const commentIdToRemove = action.commentId;\r\n      const indexOfCommentId = state.commentIds[postIdToRemoveFrom].indexOf(commentIdToRemove);\r\n      const updatedCommentIds = [...state.commentIds[postIdToRemoveFrom]];\r\n      updatedCommentIds.splice(indexOfCommentId, 1)\r\n      return {\r\n        ...state,\r\n        commentIds: {\r\n          ...state.commentIds,\r\n          [postIdToRemoveFrom]:\r\n            updatedCommentIds\r\n        }\r\n      };\r\n\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        posts: { data: [], meta: {}, ids: [] }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n//Action Creators\r\nexport const postsLoaded = (data) => ({\r\n  type: LOAD_POSTS,\r\n  payload: data,\r\n});\r\nexport const postByPostIdLoaded = (data) => ({\r\n  type: LOAD_POST_BY_POSTID,\r\n  payload: data,\r\n});\r\nexport const totalPostCountLoaded = (data) => ({\r\n  type: LOAD_TOTAL_POST_COUNT,\r\n  payload: data,\r\n});\r\nexport const loading = (data) => ({\r\n  type: LOADING_POSTS,\r\n  payload: data\r\n});\r\nexport const postEdited = (data) => ({\r\n  type: POSTS_EDITED,\r\n  payload: data\r\n});\r\nexport const postCreated = (data) => ({\r\n  type: CREATE_POST,\r\n  payload: data\r\n});\r\nexport const postDeleted = (data) => ({\r\n  type: DELETE_POST,\r\n  id: data\r\n});\r\nexport const postDisliked = (data) => ({\r\n  type: DISLIKE_POST,\r\n  payload: data\r\n});\r\nexport const postLiked = (data) => ({\r\n  type: LIKE_POST,\r\n  payload: data\r\n});\r\nexport const errorCode = (data) => ({\r\n  type: ERROR,\r\n  payload: data\r\n});\r\nexport const loadCommentIdsByPostId = (id, data, loadingType) => ({\r\n  type: LOAD_COMMENT_IDS_BY_POSTID,\r\n  payload: data,\r\n  postId: id,\r\n  loadingType: loadingType\r\n});\r\nexport const addCommentId = (postId, commentId) => ({\r\n  type: ADD_COMMENT_ID,\r\n  postId: postId,\r\n  commentId: commentId\r\n});\r\nexport const removeCommentId = (postId, commentId) => ({\r\n  type: REMOVE_COMMENT_ID,\r\n  postId: postId,\r\n  commentId: commentId\r\n});\r\n\r\n\r\n\r\n\r\n// Actions\r\nexport function createPost(post) {\r\n  return dispatch => {\r\n    return agent.Post.save(post).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Create New Post\",\r\n            message: \"New post created successfully\",\r\n          })\r\n        );\r\n        dispatch(closeModal());\r\n        dispatch(postCreated(response));\r\n        dispatch(loading(\"postSuccess\"));\r\n        dispatch(loading(null));\r\n      },\r\n      (error) => {\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function editPost(id, post) {\r\n  return dispatch => {\r\n    // dispatch(isLoading());\r\n    return agent.Post.edit(id, post).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Update Post\",\r\n            message: \"Post edited successfully\",\r\n          })\r\n        );\r\n        dispatch(postEdited(response));\r\n        dispatch(loading(\"postSuccess\"));\r\n        dispatch(loading(null));\r\n      },\r\n      (error) => {\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function loadPosts(page, take, loadingType) {\r\n  return dispatch => {\r\n    dispatch(loading(loadingType));\r\n    return agent.Post.load(page, take).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Load Posts\",\r\n            message: \"Posts Loaded\",\r\n          })\r\n        );\r\n\r\n        //For when there are comments loaded in each post\r\n        response.data.forEach(post => {\r\n          dispatch(commentsLoaded(post.id, post.comments, post.commentCount));\r\n          dispatch(loadCommentIdsByPostId(post.id, post.comments));\r\n        })\r\n        dispatch(postsLoaded(response));\r\n        dispatch(loading(null));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(loading(null));\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function loadTotalPostCount() {\r\n  return dispatch => {\r\n    // dispatch(isLoading());\r\n    return agent.Post.postCount().then(\r\n      response => {\r\n        dispatch(totalPostCountLoaded(response));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function loadPostsByUserId(page, take) {\r\n  return dispatch => {\r\n    // dispatch(isLoading());\r\n    return agent.Post.loadByUserId(page, take).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Load Posts\",\r\n            message: \"Posts Loaded\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function viewPost(id, loadingType) {\r\n  return dispatch => {\r\n    dispatch(loading(loadingType));\r\n    return agent.Post.view(id).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Load Post\",\r\n            message: \"Post Loaded\",\r\n          })\r\n        );\r\n        dispatch(postByPostIdLoaded(response));\r\n        dispatch(commentsLoaded(id, response.comments, response.commentCount));\r\n        dispatch(loadCommentIdsByPostId(id, response.comments.data));\r\n        dispatch(loading(null));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n        dispatch(loading(null));\r\n        dispatch(errorCode(error.response));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function deletePost(id, deleteType) {\r\n  return dispatch => {\r\n    return agent.Post.delete(id).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Delete Post\",\r\n            message: \"Post deleted successfully\",\r\n          })\r\n        );\r\n        if (deleteType === \"fromViewPost\") {\r\n          dispatch(push(\"/timeline\"));\r\n        }\r\n        else {\r\n          dispatch(postDeleted(id));\r\n        }\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        if (error.response.statusCode === 404) {\r\n          dispatch(postDeleted(id));\r\n        }\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function likePost(id) {\r\n  return dispatch => {\r\n    return agent.Post.like(id).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Like Post\",\r\n            message: \"Post liked!!\",\r\n          })\r\n        );\r\n        dispatch(postLiked(response));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        if (error.response.statusCode === 404) {\r\n          dispatch(postDeleted(id));\r\n        }\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function dislikePost(id) {\r\n  return dispatch => {\r\n    return agent.Post.dislike(id).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Dislike Post\",\r\n            message: \"Post disliked!!\",\r\n          })\r\n        );\r\n        dispatch(postDisliked(response));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        console.log(error.response.statusCode)\r\n        if (error.response.statusCode === 404) {\r\n          dispatch(postDeleted(id));\r\n        }\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}","import { push } from \"connected-react-router\";\r\nimport { showMessage } from \"./notification\";\r\nimport agent from \"../../services/agent.service\";\r\nimport { MESSAGE_TYPE } from \"../constant\";\r\nimport { loadLga, loadStates } from \"./location\";\r\nimport { closeModal } from \"./modal\";\r\nimport { deleteProfileExperience, loadProfileInfo, submitting } from \"./account\";\r\n\r\n// initial values\r\nconst experience = {\r\n  experience: {\r\n    id: \"\",\r\n    id: \"\",\r\n    jobTitle: \"\",\r\n    startDate: null,\r\n    endDate: null,\r\n    location: \"\",\r\n    company: \"\",\r\n    description: \"\",\r\n    jobCategoryName: \"\",\r\n    jobCategoryId: \"\",\r\n  },\r\n  loading: false,\r\n  submitting: false,\r\n  updatedOrDeleted: false,\r\n};\r\n\r\n// Action types\r\nconst UPDATE_PROFILE = \"app/experience/UPDATE_PROFILE \";\r\nconst LOAD_EXPERIENCE = \"app/experience/LOAD_EXPERIENCE\";\r\nconst LOADING = \"LOADING\";\r\nconst SUBMITTING = \"SUBMITTING\";\r\nconst LOADING_ERROR = \"LOADING_ERROR\";\r\n\r\n// Reducer\r\nexport default function reducer(state = experience, action = {}) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return { ...state, loading: true, updatedOrDeleted: false };\r\n    case SUBMITTING: {\r\n      return {...state, submitting: true}\r\n    }\r\n    case LOAD_EXPERIENCE:\r\n      return {\r\n        ...state,\r\n        experience: action.payload,\r\n        loading: false,\r\n        submitting: false,\r\n        updatedOrDeleted: true,\r\n      };\r\n    case LOADING_ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        submitting: false,\r\n        updatedOrDeleted: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Action Creators\r\nexport function experienceLoaded(data) {\r\n  return { type: LOAD_EXPERIENCE, payload: data };\r\n}\r\nexport function loadError() {\r\n  return {\r\n    type: LOADING_ERROR,\r\n  };\r\n}\r\n\r\nexport function isLoading() {\r\n  return { type: LOADING }\r\n}\r\nexport function isSubmitting(){\r\n  return {type: SUBMITTING}\r\n}\r\n// Actions\r\nexport function loadExperience(id) {\r\n  return (dispatch) => {\r\n    return agent.JobExperience.view(id).then((response) => {\r\n      dispatch(experienceLoaded(response));\r\n    });\r\n  };\r\n}\r\n\r\nexport function createExperience(data) {\r\n  return (dispatch) => {\r\n    dispatch(isSubmitting());\r\n    return agent.JobExperience.save(data).then(\r\n      (response) => {\r\n        dispatch(experienceLoaded(response));\r\n        dispatch(loadProfileInfo());\r\n        dispatch(closeModal());\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Save Job Experience\",\r\n            message: \"Job experience saved successfully\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(loadError());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport function updateExperience(id, data) {\r\n  return (dispatch) => {\r\n    dispatch(isSubmitting())\r\n    return agent.JobExperience.edit(id, data).then(\r\n      (response) => {\r\n        dispatch(experienceLoaded(response));\r\n        dispatch(closeModal());\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Save Job Experience\",\r\n            message: \"Job experience saved successfully\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(loadError());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\n\r\n","import { showMessage } from \"./notification\";\r\nimport agent from \"../../services/agent.service\";\r\nimport { MESSAGE_TYPE } from \"../constant\";\r\nimport { loadCommentIdsByPostId, addCommentId, removeCommentId } from \"./timeline\";\r\n\r\n// initial values\r\nconst comment = {\r\n  comments: { data: {}, meta: {} },\r\n  comment: {},\r\n  loadingType: null\r\n};\r\n\r\n// Action types\r\nconst LOAD_COMMENT = \"LOAD_COMMENT\";\r\nconst COMMENT_LIKED = \"COMMENT_LIKED\";\r\nconst COMMENT_DISLIKED = \"COMMENT_DISLIKED\";\r\nconst LOADING_COMMENTS = \"LOADING_COMMENTS\";\r\nconst LOAD_COMMENTS_BY_POSTID = \"LOAD_COMMENTS_BY_POSTID\";\r\nconst COMMENT_CREATED = \"COMMENT_CREATED\";\r\nconst COMMENT_DELETED = \"COMMENT_DELETED\";\r\n\r\n// Reducer\r\nexport default function reducer(state = comment, action = {}) {\r\n  switch (action.type) {\r\n    case LOAD_COMMENT:\r\n      return {\r\n        ...state,\r\n        comment: action.payload\r\n      };\r\n    case LOADING_COMMENTS:\r\n      return {\r\n        ...state,\r\n        loadingType: action.loadingType\r\n      };\r\n\r\n    case LOAD_COMMENTS_BY_POSTID:\r\n      const commentMeta = {\r\n        page: action.page,\r\n        itemCount: action.payload.length,\r\n        total: action.total\r\n      }\r\n      const postId = action.postId\r\n      const normalizedComments = action.payload.reduce((acc, comment) => {\r\n        acc[comment.id] = comment;\r\n        return acc;\r\n      }, {});\r\n      return {\r\n        ...state,\r\n        comments: {\r\n          data: {\r\n            ...state.comments.data,\r\n            ...normalizedComments\r\n          },\r\n          meta: {\r\n            ...state.comments.meta,\r\n            [postId]:\r\n            {\r\n              ...commentMeta,\r\n            }\r\n          }\r\n        }\r\n      };\r\n    case COMMENT_LIKED:\r\n      const commentToLikeId = action.payload.id\r\n      return {\r\n        ...state,\r\n        comments: {\r\n          ...state.comments,\r\n          data: {\r\n            ...state.comments.data,\r\n            [commentToLikeId]: {\r\n              ...state.comments.data[commentToLikeId],\r\n              likes: action.payload.likes,\r\n              dislikes: action.payload.dislikes\r\n            }\r\n          },\r\n          meta: { ...state.comments.meta },\r\n          ids: { ...state.comments.ids }\r\n        }\r\n      };\r\n    case COMMENT_DISLIKED:\r\n      const commentToDislikeId = action.payload.id\r\n      return {\r\n        ...state,\r\n        comments: {\r\n          ...state.comments,\r\n          data: {\r\n            ...state.comments.data,\r\n            [commentToDislikeId]: {\r\n              ...state.comments.data[commentToDislikeId],\r\n              likes: action.payload.likes,\r\n              dislikes: action.payload.dislikes\r\n            }\r\n          },\r\n          meta: { ...state.comments.meta },\r\n        }\r\n      };\r\n    case COMMENT_CREATED:\r\n      const postIdToAddTo = action.postId\r\n      const commentIdToAdd = action.payload.id\r\n      return {\r\n        ...state,\r\n        comments: {\r\n          ...state.comments,\r\n          data: {\r\n            ...state.comments.data,\r\n            [commentIdToAdd]: action.payload\r\n          },\r\n          meta: {\r\n            ...state.comments.meta,\r\n            [postIdToAddTo]: {\r\n              ...state.comments.meta[postIdToAddTo],\r\n              total: state.comments.meta[postIdToAddTo]?.total + 1 || 1,\r\n              itemCount: state.comments.meta[postIdToAddTo]?.itemCount + 1 || 1\r\n            }\r\n          }\r\n        }\r\n      };\r\n    case COMMENT_DELETED:\r\n      const postIdToRemoveFrom = action.postId\r\n      return {\r\n        ...state,\r\n        comments: {\r\n          ...state.comments,\r\n          meta: {\r\n            ...state.comments.meta,\r\n            [postIdToRemoveFrom]: {\r\n              ...state.comments.meta[postIdToRemoveFrom],\r\n              total: state.comments.meta[postIdToRemoveFrom].total - 1,\r\n              itemCount: state.comments.meta[postIdToRemoveFrom].itemCount - 1\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n//Action Creators\r\n\r\nexport const loadingComment = (loadingType) => ({\r\n  type: LOADING_COMMENTS,\r\n  loadingType: loadingType\r\n});\r\nexport const commentLiked = (postId, data) => ({\r\n  type: COMMENT_LIKED,\r\n  payload: data,\r\n  postId\r\n});\r\nexport const commentDisliked = (id, data) => ({\r\n  type: COMMENT_DISLIKED,\r\n  payload: data,\r\n  postId: id\r\n});\r\nexport const commentsLoaded = (id, data, total) => ({\r\n  type: LOAD_COMMENTS_BY_POSTID,\r\n  payload: data.data || data,\r\n  postId: id,\r\n  page: data?.meta?.page || 0,\r\n  total: data?.meta?.total || total\r\n});\r\nexport const addCreatedComment = (postId, data) => ({\r\n  type: COMMENT_CREATED,\r\n  postId: postId,\r\n  payload: data\r\n});\r\nexport const removeDeletedComment = (id, postId) => ({\r\n  type: COMMENT_DELETED,\r\n  postId: postId,\r\n  id: id\r\n});\r\n\r\n// Actions\r\nexport function postComment(id, comment, loadingType) {\r\n  return dispatch => {\r\n    dispatch(loadingComment(loadingType));\r\n    return agent.Comment.save(id, comment).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Post Comment\",\r\n            message: \"Comment posted successfully\",\r\n          })\r\n        );\r\n        dispatch(loadingComment(\"createCommentSuccess\"));\r\n        dispatch(addCreatedComment(id, response));\r\n        dispatch(addCommentId(id, response.id));\r\n        dispatch(loadingComment(null));\r\n      },\r\n      (error) => {\r\n        dispatch(loadingComment(null));\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function loadComments(id, page, take, loadingType) {\r\n  return dispatch => {\r\n    dispatch(loadingComment(loadingType));\r\n    return agent.Comment.load(id, page, take).then(\r\n      response => {\r\n        dispatch(commentsLoaded(id, response));\r\n        dispatch(loadCommentIdsByPostId(id, response.data, loadingType));\r\n        dispatch(loadingComment(null));\r\n      },\r\n      (error) => {\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n        dispatch(loadingComment(null));\r\n      }\r\n    )\r\n  }\r\n}\r\n\r\nexport function likeComment(id, postId) {\r\n  return dispatch => {\r\n    return agent.Comment.like(id).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Like Comment\",\r\n            message: \"Comment liked!!\",\r\n          })\r\n        );\r\n        dispatch(commentLiked(postId, response));\r\n      },\r\n      (error) => {\r\n        if (error.response.status === 404) {\r\n          dispatch(removeCommentId(postId, id));\r\n          dispatch(removeDeletedComment(id, postId));\r\n        }\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function dislikeComment(id, postId) {\r\n  return dispatch => {\r\n    return agent.Comment.dislike(id).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Dislike Comment\",\r\n            message: \"Comment disliked!!\",\r\n          })\r\n        );\r\n        dispatch(commentDisliked(postId, response));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        if (error.response.status === 404) {\r\n          dispatch(removeCommentId(postId, id));\r\n          dispatch(removeDeletedComment(id, postId));\r\n        }\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function deleteComment(id, postId) {\r\n  return dispatch => {\r\n    return agent.Comment.delete(id).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Delete Comment\",\r\n            message: \"Comment deleted successfully\",\r\n          })\r\n        );\r\n        dispatch(removeCommentId(postId, id));\r\n        dispatch(removeDeletedComment(id, postId));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        if (error.response.status === 404) {\r\n          dispatch(removeCommentId(postId, id));\r\n          dispatch(removeDeletedComment(id, postId));\r\n        }\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}","import { showMessage } from \"./notification\";\r\nimport agent from \"../../services/agent.service\";\r\nimport { MESSAGE_TYPE } from \"../constant\";\r\nimport { closeModal } from \"./modal\";\r\nimport { loadError } from \"./experience\";\r\n\r\n// initial values\r\nconst account = {\r\n  loading: false,\r\n  submitting: false,\r\n  profileInfo: {\r\n    id: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    imageUrl: \"\",\r\n    address: \"\",\r\n    companyName: \"\",\r\n    location: \"\",\r\n    phoneNumber: \"\",\r\n    profile: \"\",\r\n    accountType: \"\",\r\n    dateOfBirth: \"\",\r\n    hobbies: [],\r\n    interests: [],\r\n    state: \"\",\r\n    city: \"\",\r\n    lga: \"\",\r\n    postalCode: \"\",\r\n    country: \"\",\r\n    skills: [],\r\n    experiences: [],\r\n    educations: [],\r\n  },\r\n};\r\n\r\n// Action types\r\nconst LOADING = \"LOADING\";\r\nconst UPDATE_PROFILE = \"app/account/UPDATE_PROFILE \";\r\nconst LOAD_PROFILE_INFO = \"app/account/LOAD_PROFILE_INFO\";\r\nconst LOAD_PROFILE_INFO_BY_USER = \"app/account/LOAD_PROFILE_INFO_BY_USER\";\r\nconst LOAD_PROFILE_INFO_ERROR = \"LOAD_PROFILE_INFO_ERROR\";\r\nconst DELETE_EXPERIENCE = \"DELETE_EXPERIENCE\";\r\nconst DELETE_EDUCATION = \"DELETE_EDUCATION\";\r\nconst SUBMITTING = \"SUBMITTING\";\r\n// Reducer\r\nexport default function reducer(state = account, action = {}) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return { ...state, loading: true };\r\n    case SUBMITTING:\r\n      return { ...state, submitting: true }\r\n    case LOAD_PROFILE_INFO:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        submitting: false,\r\n        profileInfo: action.payload,\r\n      };\r\n    case LOAD_PROFILE_INFO_BY_USER:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        submitting: false,\r\n        profileInfo: action.payload,\r\n      };\r\n    case LOAD_PROFILE_INFO_ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        submitting: false\r\n      };\r\n    case DELETE_EDUCATION:\r\n      const newEducations = state.profileInfo.educations.filter(edu => edu.id !== action.payload);\r\n      console.log('new education', newEducations);\r\n      return {\r\n        ...state,\r\n        profileInfo: {\r\n          ...state.profileInfo,\r\n          educations: [...newEducations]\r\n        }\r\n      }\r\n    case DELETE_EXPERIENCE:\r\n      const newExperiences = state.profileInfo.experiences.filter(exp => exp.id !== action.payload)\r\n      console.log('newExperiences', newExperiences);\r\n      return {\r\n        ...state,\r\n        profileInfo: {\r\n          ...state.profileInfo,\r\n          experiences: [...newExperiences]\r\n        }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Action Creators\r\nexport function profileInfoLoaded(data) {\r\n  return { type: LOAD_PROFILE_INFO, payload: data };\r\n}\r\nexport function LoadProfileDataByUser(data) {\r\n  return { type: LOAD_PROFILE_INFO_BY_USER, payload: data };\r\n}\r\n\r\nexport const profileInfoLoadedError = () => ({\r\n  type: LOAD_PROFILE_INFO_ERROR,\r\n});\r\nexport const loading = () => ({\r\n  type: LOADING,\r\n});\r\nexport const submitting = () => ({\r\n  type: SUBMITTING\r\n})\r\n//delete education action creator\r\nexport const deleteProfileEducation = id => ({\r\n  type: DELETE_EDUCATION,\r\n  payload: id\r\n})\r\n//delete experience action creator\r\nexport const deleteProfileExperience = id => ({\r\n  type: DELETE_EXPERIENCE,\r\n  payload: id\r\n})\r\n\r\n// Actions\r\nexport function updatePersonalProfile(data) {\r\n  return (dispatch) => {\r\n    dispatch(submitting());\r\n    console.log('dispatch is called to update profile')\r\n    return agent.Account.updateProfile(data).then(\r\n      (response) => {\r\n        // dispatch(profileInfoLoaded(response));\r\n        dispatch(loadProfileInfo())\r\n        dispatch(closeModal());\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Profile Information\",\r\n            message: \"Personal profile info loaded successfully\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(profileInfoLoadedError());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\nexport function loadProfileInfo() {\r\n  return (dispatch) => {\r\n    dispatch(loading())\r\n    return agent.Account.getProfileInfo().then((response) => {\r\n      dispatch(profileInfoLoaded(response));\r\n      // dispatch(\r\n      //   showMessage({\r\n      //     type: MESSAGE_TYPE.SUCCESS,\r\n      //     title: \"Profile Information\",\r\n      //     message: \"Profile info loaded successfully\",\r\n      //   })\r\n      // );\r\n    });\r\n  };\r\n}\r\n\r\nexport function updateBiography(biography) {\r\n  return (dispatch) => {\r\n    dispatch(submitting());\r\n    return agent.Account.updateBiography(biography).then(\r\n      (response) => {\r\n        dispatch(profileInfoLoaded(response));\r\n        dispatch(closeModal());\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Update Profile Information\",\r\n            message: \"Biography saved successfully\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(profileInfoLoadedError());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport function updateLOI(loi) {\r\n  return (dispatch) => {\r\n    dispatch(loading());\r\n    return agent.Account.updateLOI(loi).then(\r\n      (response) => {\r\n        dispatch(profileInfoLoaded(response));\r\n        dispatch(closeModal());\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Update Profile Information\",\r\n            message: \"Location of interest saved successfully\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(profileInfoLoadedError());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\n// export function updateExperience(experience) {\r\n//   return (dispatch) => {\r\n//     dispatch(submitting())\r\n//     return agent.Account.updateExperience(experience).then(\r\n//       (response) => {\r\n//         dispatch(profileInfoLoaded(response));\r\n//         dispatch(closeModal());\r\n//         dispatch(\r\n//           showMessage({\r\n//             type: MESSAGE_TYPE.SUCCESS,\r\n//             title: \"Update Profile Information\",\r\n//             message: \"Job experience saved successfully\",\r\n//           })\r\n//         );\r\n//         dispatch(\r\n//           showMessage({\r\n//             type: MESSAGE_TYPE.SUCCESS,\r\n//             title: \"Update Profile Information\",\r\n//             message: \"Biography updated successfully\",\r\n//           })\r\n//         );\r\n//       },\r\n//       (error) => {\r\n//         // handle error\r\n//         dispatch(showMessage({ type: \"error\", message: error }));\r\n//       }\r\n//     );\r\n//   };\r\n// }\r\n\r\nexport function updateContactInfo(data) {\r\n  return (dispatch) => {\r\n    dispatch(submitting());\r\n    return agent.Account.updateContactInfo(data).then(\r\n      (response) => {\r\n        dispatch(profileInfoLoaded(response));\r\n        dispatch(closeModal());\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Update Profile Information\",\r\n            message: \"Contact information updated successfully\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(profileInfoLoadedError());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport function updateProfessionOfInterest(data) {\r\n  return (dispatch) => {\r\n    dispatch(loading());\r\n    return agent.Account.updateProfessionOfInterest(data).then(\r\n      (response) => {\r\n        dispatch(profileInfoLoaded(response));\r\n        dispatch(closeModal());\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Update Profile Information\",\r\n            message: \"profession of interest updated successfully\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(profileInfoLoadedError());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport function updateUserHobies(hobbies) {\r\n  return (dispatch) => {\r\n    dispatch(loading());\r\n    return agent.Account.updateHobies(hobbies).then(\r\n      (response) => {\r\n        dispatch(profileInfoLoaded(response));\r\n        dispatch(closeModal());\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Update Profile Information\",\r\n            message: \"Hobbies updated successfully\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(profileInfoLoadedError());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport function updateProfilePicture(image) {\r\n  return (dispatch) => {\r\n    dispatch(loading());\r\n    return agent.Account.updateProfilePicture(image).then(\r\n      (response) => {\r\n        // handle success\r\n        dispatch(profileInfoLoaded(response));\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            message: \"Profile image successfully updated\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(profileInfoLoadedError());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport function updateProfilePortfolio(images) {\r\n  return (dispatch) => {\r\n    dispatch(loading());\r\n    return agent.Account.updateProfilePortfolio(images).then(\r\n      (response) => {\r\n        // handle success\r\n        dispatch(profileInfoLoaded(response));\r\n        dispatch(closeModal())\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            message: \"Portfolio image successfully updated\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(profileInfoLoadedError());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport function loadAccountByUser(id) {\r\n  return (dispatch) => {\r\n    return agent.Account.getByID(id).then(\r\n      (response) => {\r\n        // handle success\r\n        dispatch(LoadProfileDataByUser(response))\r\n        // dispatch(profileInfoLoaded(response))\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\n//to delete education\r\nexport const deleteExperience = (id) => (dispatch) => {\r\n  // dispatch(loading());\r\n  return agent.JobExperience.delete(id).then(\r\n    (response) => {\r\n      dispatch(deleteProfileExperience(id));\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Delete Information\",\r\n          message: \"Job experience deleted successfully\",\r\n        })\r\n      );\r\n      dispatch(loadError());\r\n    },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(loadError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n};\r\n//to delete education\r\nexport const deleteEducation = (id) => (dispatch) => {\r\n\r\n  // dispatch(loading());\r\n  return agent.Education.delete(id).then(\r\n    (response) => {\r\n      dispatch(deleteProfileEducation(id))\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Delete Information\",\r\n          message: \"Education deleted successfully\",\r\n        })\r\n      );\r\n      dispatch(loadError());\r\n    },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(loadError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n};\r\n","import agent from \"../../services/agent.service\";\r\n\r\n// initial values\r\nconst profile = {\r\n    countries: [],\r\n    states: [],\r\n    lgas: [],\r\n    organizationNames: []\r\n};\r\n\r\n// Action types\r\nconst COUNTRY = 'COUNTRY';\r\nconst STATE = 'STATE';\r\nconst LGA = 'LGA';\r\nconst ORGANIZATIONNAME = 'ORGANIZATIONNAME';\r\n\r\n\r\n//Action Creator\r\nexport function onLoadCountry(country) {\r\n    return { type: COUNTRY, payload: country };\r\n}\r\nexport function onLoadState(state) {\r\n    return { type: STATE, payload: state };\r\n}\r\n\r\nexport function onLoadLga(lga) {\r\n    return { type: LGA, payload: lga };\r\n}\r\nexport function onLoadOrganizationNames(organizationName) {\r\n    return { type: ORGANIZATIONNAME, payload: organizationName };\r\n}\r\n\r\n// Reducer\r\nexport default function reducer(state = profile, action) {\r\n    switch (action.type) {\r\n        case COUNTRY:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                countries: action.payload,\r\n                fetching: false,\r\n            };\r\n        case STATE:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                states: action.payload,\r\n                fetching: false,\r\n            };\r\n        case LGA:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                lgas: action.payload,\r\n                fetching: false,\r\n            };\r\n        case ORGANIZATIONNAME:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                organizationNames: action.payload,\r\n                fetching: false,\r\n            };\r\n        default: return state\r\n    }\r\n};\r\n\r\n//Actions\r\nexport function loadCountry() {\r\n    return dispatch => {\r\n        return agent.Country.load().then(\r\n            response => {\r\n                dispatch(onLoadCountry(response));\r\n            },\r\n            () => {\r\n                // dispatch(showErrorMessage(error));\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport function loadStates(countryid) {\r\n    return dispatch => {\r\n        if (countryid) {\r\n            return agent.State.loadByCountry(countryid).then(\r\n                response => {\r\n                    dispatch(onLoadState(response));\r\n                },\r\n                () => {\r\n                    // dispatch(showErrorMessage(error));\r\n                }\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function loadLga(stateid) {\r\n    return dispatch => {\r\n        if (stateid) {\r\n            return agent.Lga.loadByState(stateid).then(\r\n                response => {\r\n                    dispatch(onLoadLga(response));\r\n                }\r\n            );\r\n        }\r\n    }\r\n}\r\nexport function LoadOrganizationNames() {\r\n    return dispatch => {\r\n        return agent.Account.organizationName().then(\r\n            response => {\r\n                dispatch(onLoadOrganizationNames(response));\r\n            },\r\n            () => {\r\n                // dispatch(showErrorMessage(error));\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","export const ACCOUNT_TYPE = {\r\n    CORPORATE: \"Corporate\",\r\n    ARTISAN: \"Artisan\",\r\n    JOB_SEEKER: \"Job Seeker\",\r\n    INSTANT_HIRE: \"Instant Hire\",\r\n}\r\n","import { showMessage } from './notification';\r\nimport { push } from \"connected-react-router\";\r\nimport agent from \"../../services/agent.service\";\r\nimport { MESSAGE_TYPE } from \"store/constant\";\r\n\r\n// initial values\r\nconst Initial_State = {\r\n    instantjob: {},\r\n    instantjobs: [],\r\n    allCurrentInstantJobs: [],\r\n    applicants: [],\r\n    applicantProfile: null,\r\n    loading: false\r\n};\r\n\r\n\r\n// Action types\r\nconst CREATE_INSTANT_JOB = 'app/instantJob/CREATE_INSTANT_JOB';\r\nconst LOAD_INSTANT_JOBS = 'app/instantJob/LOAD_INSTANT_JOBS';\r\nconst LOAD_INSTANT_JOB = 'app/instantJob/LOAD_INSTANT_JOB';\r\nconst LOAD_ALL_INSTANT_JOBS = 'app/instantJob/LOAD_ALL_INSTANT_JOBS';\r\nconst LOAD_INSTANT_APPLICANTS = 'app/instantJob/LOAD_INSTANT_APPLICANT';\r\nconst LOAD_APPLICANT_INFO = 'app/instantJob/LOAD_APPLICANT_INFO';\r\nconst LOADING = \"LOADING\";\r\n\r\n\r\n// Reducer\r\nexport default function reducer(state = Initial_State, action = {}) {\r\n    switch (action.type) {\r\n        case CREATE_INSTANT_JOB:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                fetching: false,\r\n                instantjobs: action.payload\r\n            };\r\n        case LOAD_INSTANT_JOBS:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                fetching: false,\r\n                instantjobs: action.payload?.data\r\n            };\r\n        case LOAD_INSTANT_JOB:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                fetching: false,\r\n                instantjob: action.payload\r\n            };\r\n        case LOAD_ALL_INSTANT_JOBS:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                fetching: false,\r\n                allCurrentInstantJobs: action.payload.data\r\n            };\r\n        case LOAD_INSTANT_APPLICANTS:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                fetching: false,\r\n                applicants: action.payload\r\n            };\r\n        case LOAD_APPLICANT_INFO:\r\n            return {\r\n                ...state,\r\n                applicantProfile: action.payload\r\n            };\r\n        case LOADING:\r\n            return {\r\n                ...state,\r\n                loading: action.payload,\r\n                error: null\r\n            };\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport function onCreateInstantJob(data) {\r\n    return {\r\n        type: CREATE_INSTANT_JOB,\r\n        payload: data\r\n    };\r\n}\r\nexport function onLoadInstantJobs(data) {\r\n    return {\r\n        type: LOAD_INSTANT_JOBS,\r\n        payload: data\r\n    };\r\n}\r\nexport function onLoadInstantJob(data) {\r\n    return {\r\n        type: LOAD_INSTANT_JOB,\r\n        payload: data\r\n    };\r\n}\r\nexport function onLoadAllInstantJobs(data) {\r\n    return {\r\n        type: LOAD_ALL_INSTANT_JOBS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport function onLoadInstantJobApplicants(data) {\r\n    return {\r\n        type: LOAD_INSTANT_APPLICANTS,\r\n        payload: data\r\n    };\r\n}\r\n\r\nexport function onLoadApplicantProfile(data) {\r\n    return {\r\n        type: LOAD_APPLICANT_INFO,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport function isRequestLoading(data) {\r\n    return {\r\n        type: LOADING,\r\n        payload: data\r\n    }\r\n}\r\n\r\n// Actions\r\nexport function createInstantJob(instantjob) {\r\n    return dispatch => {\r\n        dispatch(isRequestLoading(true));\r\n        return agent.InstantJob.save(instantjob).then(\r\n            response => {\r\n                dispatch(isRequestLoading(false));\r\n                // handle success\r\n                dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"Instant Job successful created\", title: 'Instant job create Successful' }));\r\n                dispatch(push(\"/instant-hires\"));\r\n\r\n            }, error => { // handle error\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to create Instant job\" }));\r\n                dispatch(isRequestLoading(false));\r\n            });\r\n    }\r\n}\r\n\r\n// This function loads all instant jobs created by a particular user.\r\nexport function loadInstantJobs() {\r\n    return dispatch => {\r\n        return agent.InstantJob.load().then(\r\n            response => {\r\n                //handle success\r\n                dispatch(onLoadInstantJobs(response));\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to load Instant jobs\" }));\r\n            }\r\n        )\r\n    }\r\n}\r\n// This function loads all instant jobs that created by different users.\r\nexport function fetchAllInstantJobs(page, take) {\r\n    return dispatch => {\r\n        return agent.InstantJob.loadAllInstantJobs(page, take).then(\r\n            response => {\r\n                //handle success\r\n                dispatch(onLoadAllInstantJobs(response));\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to load Instant jobs\" }));\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport function acceptApplicant(id) {\r\n    return dispatch => {\r\n        return agent.InstantJob.accept(id).then(\r\n            response => {\r\n                //handle success\r\n                dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"The applicant will be notified\", title: 'Request accepted Successful' }));\r\n                window.location.reload();\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to load Instant jobs\" }));\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport function rejectApplicant(id) {\r\n    return dispatch => {\r\n        return agent.InstantJob.reject(id).then(\r\n            response => {\r\n                //handle success\r\n                dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"Applicant's request rejected\", title: 'Request rejected Successful' }));\r\n                // dispatch(onLoadInstantJobApplicants(response));\r\n                window.location.reload();\r\n\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to load Instant jobs\" }));\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport function loadInstantJob(id) {\r\n    return dispatch => {\r\n        return agent.InstantJob.view(id).then(\r\n            response => {\r\n                //handle success\r\n                dispatch(onLoadInstantJob(response));\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to load Instant jobs\" }));\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport function applyInstantJob(id) {\r\n    return dispatch => {\r\n        return agent.InstantJob.apply(id).then(\r\n            response => {\r\n                //handle success\r\n                dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"You have successfully applied for this job\", title: 'Applied successfully' }));\r\n                dispatch(push(\"/instant-jobs\"));\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to load Instant jobs\" }));\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport function loadApplicants(id) {\r\n    return dispatch => {\r\n        return agent.InstantJob.loadApplicants(id).then(\r\n            response => {\r\n                //handle success\r\n                dispatch(onLoadInstantJobApplicants(response));\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to load Instant jobs applicant\" }));\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport function loadApplicantProfile(id) {\r\n    return dispatch => {\r\n        return\r\n    }\r\n}\r\n\r\nexport function editInstantJob(id, data,) {\r\n    return dispatch => {\r\n        dispatch(isRequestLoading(false))\r\n        return agent.InstantJob.edit(id, data).then(\r\n            response => {\r\n                //handle success\r\n                dispatch(isRequestLoading(false));\r\n                dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"Instant Job successfully udated\", title: 'Instant job successfully updated ' }));\r\n                dispatch(push(\"/instant-hires\"));\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to load Instant job\" }));\r\n                dispatch(isRequestLoading(false));\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport function deleteInstantJob(id) {\r\n    return dispatch => {\r\n        return agent.InstantJob.delete(id).then(\r\n            response => {\r\n                //handle success\r\n                dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"Instant Job successfully deleted\", title: 'Instant job Successfully deleted ' }));\r\n                dispatch(onLoadInstantJobs(response));\r\n                dispatch(push(\"/instant-hires\"));\r\n                window.location.reload();\r\n\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to delete Instant job\" }));\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport function review(id) {\r\n    return dispatch => {\r\n        return agent.InstantJob.delete(id).then(\r\n            response => {\r\n                //handle success\r\n                dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"Instant Job successfully deleted\", title: 'Instant job Successfully deleted ' }));\r\n                dispatch(onLoadInstantJobs(response));\r\n                dispatch(push(\"/instant-hires\"));\r\n                window.location.reload();\r\n\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to delete Instant job\" }));\r\n            }\r\n        )\r\n    }\r\n}\r\n","import { MESSAGE_TYPE } from \"store/constant\";\r\nimport { showMessage } from \"./notification\";\r\nimport agent from \"../../services/agent.service\";\r\n\r\nconst initialState = {\r\n    editingJob: false,\r\n    loading: false,\r\n    loadingApplicants: false,\r\n    allJobs: [],\r\n    jobs: [],\r\n    jobDetail: null,\r\n    applicants: [],\r\n    jobApplicationResponse: null,\r\n    jobApplicationRequest: false,\r\n}\r\n\r\nconst LOADING = \"LOADING\";\r\nconst EDITING_JOB = \"EDITING_JOB\";\r\nconst EDIT_JOB_SUCCESS = 'EDIT_JOB_SUCCESS';\r\nconst LOAD_ALL_JOBS = \"LOAD_ALL_JOBS\";\r\nconst LOAD_JOBS = \"LOAD_JOBS\";\r\nconst LOAD_SINGLE_JOB = \"LOAD_SINGLE_JOB\";\r\nconst GET_JOB_DETAIL = \"GET_JOB_DETAIL\";\r\nconst APPLY_JOB_REQUEST = 'APPLY_JOB_REQUEST';\r\nconst APPLY_JOB = 'APPLY_JOB';\r\nconst LOADING_APPLICANTS = 'LOADING_APPLICANTS';\r\nconst GET_JOB_APPLICANTS = 'GET_JOB_APPLICANTS';\r\nconst LOAD_JOBS_ERROR = \"LOAD_JOBS_ERROR\";\r\n\r\n// Reducer\r\nexport default function reducer(state = initialState, action = {}) {\r\n    switch (action.type) {\r\n        case LOADING:\r\n            return { ...state, \r\n                loading: true, \r\n                jobs: [],\r\n                allJobs: [],\r\n                jobDetail: null \r\n            };\r\n        case EDITING_JOB: \r\n            return {\r\n                ...state,\r\n                editingJob: true\r\n            }\r\n        case EDIT_JOB_SUCCESS: \r\n            return {\r\n                ...state,\r\n                editingJob: false\r\n            }\r\n        case LOADING_APPLICANTS:\r\n            return {\r\n                ...state,\r\n                loadingApplicants: true\r\n            }\r\n        case LOAD_ALL_JOBS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                allJobs: action.payload.data\r\n            }\r\n        case LOAD_JOBS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                jobs: action.payload.data,\r\n\r\n            };\r\n        case LOAD_SINGLE_JOB: \r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                jobs: [...state.jobs, action.payload],\r\n            }\r\n        case GET_JOB_DETAIL:\r\n            return { \r\n                ...state,\r\n                loading: false,\r\n                jobDetail: action.payload\r\n            }\r\n        case APPLY_JOB_REQUEST:\r\n            return {\r\n                ...state,\r\n                jobApplicationRequest: true\r\n            }\r\n        case APPLY_JOB:\r\n            return {\r\n                ...state,\r\n                jobApplicationRequest: false,\r\n                jobApplicationResponse: action.payload\r\n            }\r\n        case GET_JOB_APPLICANTS:\r\n            return {\r\n                ...state,\r\n                loadingApplicants: false,\r\n                applicants: action.payload\r\n            }\r\n        case LOAD_JOBS_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const allJobsLoaded = data => ({\r\n    type: LOAD_ALL_JOBS,\r\n    payload: data\r\n})\r\nexport function jobsLoaded(data) {\r\n    return { type: LOAD_JOBS, payload: data };\r\n}\r\nexport const jobsLoadedError = () => ({\r\n    type: LOAD_JOBS_ERROR,\r\n});\r\nexport const jobSingleLoaded = data => {\r\n    return { type: LOAD_SINGLE_JOB, payload: data}\r\n}\r\nexport const getJobDetail = data => ({\r\n    type: GET_JOB_DETAIL,\r\n    payload: data\r\n})\r\nexport const applyJobRequest = () => ({\r\n    type: APPLY_JOB_REQUEST\r\n})\r\nexport const applyJob = response => ({\r\n    type: APPLY_JOB,\r\n    payload: response\r\n})\r\nexport const actionLoadingApplicants = () => ({\r\n    type: LOADING_APPLICANTS\r\n})\r\nexport const actionGetApplicant = response => ({\r\n    type: GET_JOB_APPLICANTS,\r\n    payload: response\r\n})\r\nexport const editJobSuccess = () => ({\r\n    type: EDIT_JOB_SUCCESS\r\n})\r\nexport const editingJob = () => ({\r\n    type: EDITING_JOB\r\n})\r\nexport const loading = () => ({\r\n    type: LOADING,\r\n});\r\n\r\n// Actions\r\nexport const loadAllJobs = () => dispatch => {\r\n    dispatch(loading());\r\n    return agent.Job.loadAll().then((response) => {\r\n        dispatch(allJobsLoaded(response));\r\n    });\r\n}\r\nexport const loadJobs = () => (dispatch) => {\r\n    dispatch(loading())\r\n    return agent.Job.load().then((response) => {\r\n        dispatch(jobsLoaded(response));\r\n    });\r\n};\r\n\r\nexport function viewJob(jobId) {\r\n    return (dispatch) => {\r\n        dispatch(loading());\r\n        return agent.Job.view(jobId).then(\r\n            (response) => {\r\n                dispatch(getJobDetail(response));\r\n            },\r\n            (error) => {\r\n                // handle error\r\n                dispatch(jobsLoadedError());\r\n                dispatch(showMessage({ type: \"error\", message: error }));\r\n            }\r\n        );\r\n    };\r\n}\r\n\r\nexport function createJob(data) {\r\n    return (dispatch) => {\r\n        dispatch(loading());\r\n        return agent.Job.save(data).then(\r\n            (response) => {\r\n                dispatch(jobSingleLoaded(response));\r\n                dispatch(\r\n                    showMessage({\r\n                        type: MESSAGE_TYPE.SUCCESS,\r\n                        title: \"Job Information\",\r\n                        message: \"Job created successfully\",\r\n                    })\r\n                );\r\n            },\r\n            (error) => {\r\n                // handle error\r\n                dispatch(jobsLoadedError());\r\n                dispatch(showMessage({ type: \"error\", message: error }));\r\n            }\r\n        );\r\n    };\r\n}\r\nexport function editJob(id, data) {\r\n    return (dispatch) => {\r\n        dispatch(editingJob())\r\n        return agent.Job.edit(id, data).then(\r\n            (response) => {\r\n                dispatch(editJobSuccess());\r\n                dispatch(\r\n                    showMessage({\r\n                        type: MESSAGE_TYPE.SUCCESS,\r\n                        title: \"Job Information\",\r\n                        message: \"Job updated successfully\",\r\n                    })\r\n                );\r\n            },\r\n            (error) => {\r\n                // handle error\r\n                dispatch(jobsLoadedError());\r\n                dispatch(showMessage({ type: \"error\", message: error }));\r\n            }\r\n        );\r\n    };\r\n}\r\n\r\nexport function apply(jobId, data) {\r\n    return (dispatch) => {\r\n        dispatch(applyJobRequest());\r\n        return agent.Job.apply(jobId, data).then(\r\n            (response) => {\r\n                dispatch(applyJob(response));\r\n                dispatch(\r\n                    showMessage({\r\n                        type: MESSAGE_TYPE.SUCCESS,\r\n                        title: \"Job Application\",\r\n                        message: \"Job applied successfully\",\r\n                    })\r\n                );\r\n            },\r\n            (error) => {\r\n                // handle error\r\n                dispatch(jobsLoadedError());\r\n                dispatch(showMessage({ type: \"error\", message: error }));\r\n            }\r\n        );\r\n    };\r\n}\r\n\r\nexport function viewApplicant(jobId){\r\n    return (dispatch) => {\r\n        dispatch(actionLoadingApplicants());\r\n        return agent.Job.applicants(jobId).then(\r\n            (response) => {\r\n                dispatch(actionGetApplicant(response));\r\n            },\r\n            (error) => {\r\n                // handle error\r\n                dispatch(jobsLoadedError());\r\n                dispatch(showMessage({ type: \"error\", message: error }));\r\n            }\r\n        );\r\n    };\r\n}\r\n\r\nexport function acceptApplicant(applicationId, data) {\r\n    return dispatch => {\r\n        return agent.Job.acceptApplication(applicationId, data).then(\r\n            response => {\r\n                dispatch(\r\n                    showMessage({\r\n                        type: MESSAGE_TYPE.SUCCESS,\r\n                        title: \"Applicant status\",\r\n                        message: \"Applicant accepted!\",\r\n                    })\r\n                );\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error }));\r\n            }\r\n        )\r\n    }\r\n}","import { showMessage } from './notification';\r\nimport { push } from \"connected-react-router\";\r\nimport agent from \"../../services/agent.service\";\r\nimport { MESSAGE_TYPE } from \"store/constant\";\r\nimport { ACCOUNT_TYPE } from 'constants/accountType';\r\n\r\n// initial values\r\nconst authData = {\r\n  loading: false,\r\n  currentUser: {\r\n    // email: \"\",\r\n    // password: \"\",\r\n    // token: \"\",\r\n    // accountType: \"\",\r\n    // accountPackage: \"\",\r\n    // isRegComplete: false\r\n  }\r\n};\r\n\r\n\r\n// Action types\r\nconst REGISTERED = 'app/auth/REGISTERED';\r\nconst LOGGED_IN = 'app/auth/LOGGED_IN';\r\nconst LOGGED_OUT = 'app/auth/LOGGED_OUT';\r\nconst FORGOT_PASSWORD = 'app/auth/FORGOT_PASSWORD';\r\nconst UPDATE_PASSWORD = 'app/auth/UPDATE_PASSWORD';\r\nconst LOADING = 'app/auth/LOADING';\r\n\r\n// Reducer\r\nexport default function reducer(state = authData, action = {}) {\r\n  switch (action.type) {\r\n    case REGISTERED: return {\r\n      ...state,\r\n      error: null,\r\n      fetching: false\r\n    };\r\n    case LOGGED_IN: return {\r\n      ...state,\r\n      error: null,\r\n      fetching: false,\r\n      currentUser: action.payload\r\n    };\r\n    case LOGGED_OUT: return {\r\n      ...state,\r\n      fetching: false,\r\n      currentUser: null\r\n    };\r\n    case FORGOT_PASSWORD: return {\r\n      ...state,\r\n      fetching: false,\r\n      currentUser: null\r\n    };\r\n    case UPDATE_PASSWORD: return {\r\n      ...state,\r\n      fetching: false,\r\n      currentUser: null\r\n    };\r\n    case LOADING: return {\r\n      ...state,\r\n      loading: action.payload\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Action Creators\r\nexport function userRegistered() {\r\n  return { type: REGISTERED };\r\n}\r\n\r\nexport function userLoggedIn(user) {\r\n  return { type: LOGGED_IN, payload: user };\r\n}\r\n\r\nexport function userLoggedOut() {\r\n  return { type: LOGGED_OUT }\r\n}\r\nexport function userForgotPassword() {\r\n  return { type: FORGOT_PASSWORD }\r\n}\r\n\r\nexport function userUpdatePassword() {\r\n  return { type: UPDATE_PASSWORD }\r\n}\r\n\r\nexport function isRequestLoading(payload) {\r\n  return {\r\n    type: LOADING,\r\n    payload\r\n  }\r\n}\r\n\r\n// Actions\r\nexport function registerUser(user) {\r\n  return dispatch => {\r\n    return agent.Auth.register(user).then(response => { // handle success\r\n      dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"Signup successful, login to continue\", title: 'Signup Successful' }));\r\n      dispatch(push(`/security-verification?email=${response.email\r\n        }`));\r\n    }, error => { // handle error\r\n      dispatch(showMessage({ type: \"error\", message: error, title: \"User Registration Failed\" }));\r\n    });\r\n  }\r\n}\r\n\r\n\r\nexport function verifyAccount(code) {\r\n  return dispatch => {\r\n    return agent.Auth.verifyAccount(code).then(response => {\r\n      // handle success\r\n      dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"account verification successful, login to continue\" }));\r\n      dispatch(push(`/login`));\r\n    }, error => {\r\n      // handle error\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    });\r\n  }\r\n}\r\n\r\nexport function loginUser({ email, password, type }) {\r\n  return dispatch => {\r\n    dispatch(isRequestLoading(true))\r\n    return agent.Auth.login(email, password, type).then(\r\n      response => {\r\n        // handle success\r\n        dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"welcome, login successful\", title: \"Login Success\" }));\r\n\r\n        if (response.role === (\"Super-admin\" || \"developer\")) {\r\n          onLogin(dispatch, response);\r\n          console.log({ response });\r\n          dispatch(push('/admin'));\r\n          return;\r\n        }\r\n\r\n        if (response.accountType === ACCOUNT_TYPE.CORPORATE) {\r\n          onLogin(dispatch, response);\r\n          console.log({ response });\r\n          dispatch(push('/company'));\r\n        }\r\n        else if (response.accountType === ACCOUNT_TYPE.INSTANT_HIRE) {\r\n          onLogin(dispatch, response);\r\n          dispatch(push('/new-instant-hire'));\r\n        }\r\n        else {\r\n          onLogin(dispatch, response);\r\n          dispatch(push(\"/profile\"));\r\n        }\r\n        dispatch(isRequestLoading(false))\r\n      }, error => {\r\n        // handle error\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n        dispatch(isRequestLoading(false))\r\n      });\r\n  }\r\n}\r\n\r\nexport function forgotPasswordUser({ email }) {\r\n  return dispatch => {\r\n    return agent.Auth.forgotPassword(email).then(response => { // handle success\r\n      dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"A link to reset your password has been sent to your email\", title: \"Link sent to you\" }));\r\n      dispatch(push(\"\"));\r\n    }, error => { // handle error\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    });\r\n  }\r\n}\r\n\r\nexport function updateUserPassword(data) {\r\n  return dispatch => {\r\n    return agent.Auth.updatePassword(data).then(response => {\r\n      console.log({ response });\r\n      // handle success\r\n      dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"Password successfully updated\" }));\r\n      dispatch(push(\"/login\"));\r\n    }, error => { // handle error\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    });\r\n  }\r\n}\r\n\r\nfunction onLogin(dispatch, user) {\r\n  agent.Auth.saveAuthData(user)\r\n  dispatch(userLoggedIn(user))\r\n}\r\n\r\nexport function OnLogout() {\r\n  return dispatch => {\r\n    agent.Auth.logout()\r\n    dispatch(userLoggedOut())\r\n    dispatch(push('/login'))\r\n  }\r\n}\r\n","import { push } from \"connected-react-router\";\r\nimport { showMessage } from \"./notification\";\r\nimport { MESSAGE_TYPE } from \"../constant\";\r\nimport { loadLga, loadStates } from \"./location\";\r\nimport { closeModal } from \"./modal\";\r\nimport { loadError } from \"./experience\";\r\nimport agent from \"../../services/agent.service\";\r\n\r\n// initial values\r\nconst admin = {\r\n  loading: false,\r\n  adminLoading: null,\r\n  contractTypes: [],\r\n  skills: [],\r\n  qualifications: [],\r\n  serviceGroups: [],\r\n  serviceGroupsForServiceComponent: [],\r\n  services: [],\r\n  message: null\r\n};\r\n\r\n// Action types\r\nconst LOADING = \"LOADING\";\r\nconst ADMIN_LOADING = \"ADMIN_LOADING\";\r\nconst UPDATE_PROFILE = \"UPDATE_PROFILE\";\r\nconst LOAD_PROFILE_INFO = \"app/account/LOAD_PROFILE_INFO\";\r\nconst LOAD_ADMIN_ERROR = \"LOAD_ADMIN_ERROR\";\r\n\r\nconst LOAD_CONTRACT_TYPES = \"LOAD_CONTRACT_TYPES\";\r\nconst LOAD_SKILLS = \"LOAD_SKILLS\";\r\nconst LOAD_QUALIFICATIONS = \"LOAD_QUALIFICATIONS\";\r\nconst LOAD_SERVICES = \"LOAD_SERVICES\";\r\nconst LOAD_SERVICE_GROUPS = \"LOAD_SERVICE_GROUPS\";\r\nconst LOAD_SERVICE_GROUPS_FOR_SERVICE = \"LOAD_SERVICE_GROUPS_FOR_SERVICE\";\r\n\r\nconst CREATE_CONTRACT_TYPE = \"CREATE_CONTRACT_TYPE\";\r\nconst UPDATE_CONTRACT_TYPE = \"UPDATE_CONTRACT_TYPE\";\r\nconst DELETE_CONTRACT_TYPE = \"DELETE_CONTRACT_TYPE\";\r\n\r\nconst CREATE_SKILLS = \"CREATE_SKILLS\";\r\nconst UPDATE_SKILLS = \"UPDATE_SKILLS\";\r\nconst DELETE_SKILLS = \"DELETE_SKILLS\";\r\n\r\nconst CREATE_QUALIFICATION = \"CREATE_QUALIFICATION\";\r\nconst UPDATE_QUALIFICATION = \"UPDATE_QUALFICATION\";\r\nconst DELETE_QUALIFICATION = \"DELETE_QUALIFICATION\";\r\n\r\nconst CREATE_SERVICE_GROUP = \"CREATE_SERVICE_GROUP\";\r\nconst UPDATE_SERVICE_GROUP = \"UPDATE_SERVICE_GROUP\";\r\nconst DELETE_SERVICE_GROUP = \"DELETE_SERVICE_GROUP\";\r\n\r\nconst CREATE_SERVICE = \"CREATE_SERVICE\";\r\nconst UPDATE_SERVICE = \"UPDATE_SERVICE\";\r\nconst DELETE_SERVICE = \"DELETE_SERVICE\";\r\n\r\n// Reducer\r\nexport default function reducer(state = admin, action = {}) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return { ...state, loading: true, message: null };\r\n    case ADMIN_LOADING:\r\n      return { ...state, adminLoading: action.payload };\r\n\r\n    case LOAD_PROFILE_INFO:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        profileInfo: action.payload,\r\n      };\r\n    case LOAD_ADMIN_ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        messsage: null\r\n      };\r\n\r\n    case UPDATE_PROFILE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      }\r\n    case LOAD_CONTRACT_TYPES:\r\n      return { ...state, loading: false, contractTypes: action.payload.data, message: null }\r\n    case LOAD_SKILLS: return { ...state, loading: false, skills: action.payload.data, message: null }\r\n    case LOAD_QUALIFICATIONS: return { ...state, loading: false, qualifications: action.payload.data, message: null }\r\n\r\n    case LOAD_SERVICE_GROUPS: return { ...state, loading: false, serviceGroups: action.payload, message: null, adminLoading: null }\r\n    case LOAD_SERVICE_GROUPS_FOR_SERVICE: return { ...state, loading: false, adminLoading: null, serviceGroupsForServiceComponent: action.payload, message: null }\r\n    case LOAD_SERVICES: return { ...state, loading: false, services: action.payload, message: null, adminLoading: null }\r\n\r\n    case CREATE_CONTRACT_TYPE:\r\n    case CREATE_SKILLS:\r\n    case CREATE_SERVICE_GROUP:\r\n    case CREATE_SERVICE:\r\n    case CREATE_QUALIFICATION:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        message: \"created\"\r\n      }\r\n    case UPDATE_CONTRACT_TYPE:\r\n    case UPDATE_SKILLS:\r\n    case UPDATE_QUALIFICATION:\r\n    case UPDATE_SERVICE_GROUP:\r\n      //update service group array\r\n      const newServiceGroupArray = state.serviceGroups.data.filter(serviceGroup => serviceGroup.id !== action.payload.id);\r\n      newServiceGroupArray.push(action.payload);\r\n\r\n      //check if any service has service group to be updated\r\n      let serviceArray = [...state.services.data];\r\n      if (state.services.data.length > 0) {\r\n        serviceArray = state.services.data.map(function (item) {\r\n          if (item.groupId === action.payload.id) {\r\n            return { ...item, group: action.payload.name }\r\n          }\r\n          return item;\r\n        })\r\n      }\r\n      console.log(serviceArray)\r\n\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        message: \"updated\",\r\n        adminLoading: null,\r\n        services: {\r\n          ...state.services,\r\n          data: serviceArray\r\n        },\r\n        serviceGroups: { ...state.serviceGroups, data: newServiceGroupArray },\r\n        serviceGroupsForServiceComponent: { ...state.serviceGroupsForServiceComponent, data: newServiceGroupArray }\r\n      }\r\n    case UPDATE_SERVICE:\r\n      const newServiceArray = state.services.data.filter(service => service.id !== action.payload.id);\r\n      const updatedService = { name: action.payload.name, id: action.payload.id, groupId: action.payload.groupId, group: action.payload.group, description: action.payload.description }\r\n      newServiceArray.push(updatedService);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        message: \"updated\",\r\n        adminLoading: null,\r\n        services: { ...state.services, data: newServiceArray }\r\n      }\r\n    case DELETE_CONTRACT_TYPE:\r\n    case DELETE_SKILLS:\r\n    case DELETE_QUALIFICATION:\r\n    case DELETE_SERVICE_GROUP:\r\n    case DELETE_SERVICE:\r\n      return {\r\n        ...state,\r\n        message: 'deleted',\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const loading = () => ({\r\n  type: LOADING,\r\n});\r\n\r\nexport const adminLoading = (data) => ({\r\n  type: ADMIN_LOADING,\r\n  payload: data\r\n});\r\n\r\nexport const adminLoadedError = () => ({\r\n  type: LOAD_ADMIN_ERROR,\r\n});\r\nexport const loadContractTypes = (data) => ({\r\n  type: LOAD_CONTRACT_TYPES,\r\n  payload: data,\r\n});\r\nexport const actionCreateContractType = (response) => ({\r\n  type: CREATE_CONTRACT_TYPE,\r\n  payload: response\r\n})\r\n\r\nexport const actionUpdateContractType = (response) => ({\r\n  type: UPDATE_CONTRACT_TYPE\r\n})\r\nexport const actionDeleteContractType = (response) => ({\r\n  type: DELETE_CONTRACT_TYPE\r\n})\r\nexport const actionLoadSkills = (response) => ({\r\n  type: LOAD_SKILLS,\r\n  payload: response\r\n})\r\n\r\nexport const actionCreateSkills = (response) => ({\r\n  type: CREATE_SKILLS,\r\n  payload: response\r\n})\r\nexport const actionUpdateSkills = (response) => ({\r\n  type: UPDATE_SKILLS\r\n})\r\nexport const actionDeleteSkills = (response) => ({\r\n  type: DELETE_SKILLS\r\n})\r\nexport const actionLoadQualification = (response) => ({\r\n  type: LOAD_QUALIFICATIONS,\r\n  payload: response\r\n})\r\nexport const actionCreateQualification = (response) => ({\r\n  type: CREATE_SKILLS,\r\n  payload: response\r\n})\r\nexport const actionUpdateQualification = (response) => ({\r\n  type: UPDATE_SKILLS\r\n})\r\nexport const actionDeleteQualification = (response) => ({\r\n  type: DELETE_SKILLS\r\n})\r\nexport const actionLoadServiceGroups = (response) => ({\r\n  type: LOAD_SERVICE_GROUPS,\r\n  payload: response\r\n})\r\nexport const actionLoadServiceGroupsForService = (response) => ({\r\n  type: LOAD_SERVICE_GROUPS_FOR_SERVICE,\r\n  payload: response\r\n})\r\nexport const actionCreateServiceGroup = (response) => ({\r\n  type: CREATE_SERVICE_GROUP,\r\n  payload: response\r\n})\r\nexport const actionUpdateServiceGroup = (response) => ({\r\n  type: UPDATE_SERVICE_GROUP,\r\n  payload: response\r\n})\r\nexport const actionDeleteServiceGroup = (response) => ({\r\n  type: DELETE_SERVICE_GROUP\r\n})\r\nexport const actionLoadServices = (response) => ({\r\n  type: LOAD_SERVICES,\r\n  payload: response\r\n})\r\nexport const actionCreateService = (response) => ({\r\n  type: CREATE_SERVICE,\r\n  payload: response\r\n})\r\nexport const actionUpdateService = (response) => ({\r\n  type: UPDATE_SERVICE,\r\n  payload: response\r\n})\r\nexport const actionDeleteService = (response) => ({\r\n  type: DELETE_SERVICE\r\n})\r\n\r\nexport const getContractTypes = () => (dispatch) => {\r\n  return agent.ContractType.load().then((response) => {\r\n    dispatch(loadContractTypes(response));\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Contract types Information\",\r\n        message: \"Contract types loaded successfully\",\r\n      })\r\n    );\r\n  });\r\n};\r\n\r\nexport const createContractType = data => dispatch => {\r\n  dispatch(loading());\r\n  return agent.ContractType.save(data).then(\r\n    (response) => {\r\n      dispatch(actionCreateContractType(response));\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Update Contract type Information\",\r\n          message: \"Contract type created successfully\",\r\n        })\r\n      );\r\n    },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n};\r\n\r\nexport const updateContractType = (data, id) => dispatch => {\r\n  dispatch(loading());\r\n  return agent.ContractType.edit(id, data).then(c => (response) => {\r\n    dispatch(actionUpdateContractType(response));\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Update Contract type Information\",\r\n        message: \"Contract type updated successfully\",\r\n      })\r\n    );\r\n  },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    })\r\n}\r\n\r\nexport const deleteContractType = (id) => dispatch => {\r\n  return agent.ContractType.delete(id).then(c => (response) => {\r\n    dispatch(actionDeleteContractType(response));\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Delete Contract type Information\",\r\n        message: \"Contract type deleted successfully\",\r\n      })\r\n    );\r\n  },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    })\r\n}\r\n\r\n//SKILLS\r\nexport const getSkills = () => (dispatch) => {\r\n  return agent.Skill.load().then((response) => {\r\n    dispatch(actionLoadSkills(response));\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Skills Information\",\r\n        message: \"Skills loaded successfully\",\r\n      })\r\n    );\r\n  });\r\n};\r\n\r\nexport const createSkills = data => dispatch => {\r\n  dispatch(loading());\r\n  return agent.Skill.save(data).then(\r\n    (response) => {\r\n      dispatch(actionCreateSkills(response));\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Update Skill Information\",\r\n          message: \"Skill created successfully\",\r\n        })\r\n      );\r\n    },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n};\r\n\r\nexport const updateSkills = (data, id) => dispatch => {\r\n  dispatch(loading());\r\n  return agent.Skill.edit(id, data).then(c => (response) => {\r\n    dispatch(actionUpdateSkills(response));\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Update skill Information\",\r\n        message: \"Skill updated successfully\",\r\n      })\r\n    );\r\n  },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    })\r\n}\r\n\r\nexport const deleteSkills = (id) => dispatch => {\r\n  return agent.Skill.delete(id).then(c => (response) => {\r\n    dispatch(actionDeleteSkills(response));\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Delete Skill Information\",\r\n        message: \"Skill deleted successfully\",\r\n      })\r\n    );\r\n  },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    })\r\n}\r\n\r\n//QUALIFICATIONS\r\nexport const getQualifications = () => (dispatch) => {\r\n  return agent.Qualification.load().then((response) => {\r\n    dispatch(actionLoadQualification(response));\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Qualification Information\",\r\n        message: \"Qualification loaded successfully\",\r\n      })\r\n    );\r\n  });\r\n};\r\n\r\nexport const createQualification = data => dispatch => {\r\n  dispatch(loading());\r\n  return agent.Qualification.save(data).then(\r\n    (response) => {\r\n      dispatch(actionCreateQualification(response));\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Update Qualification Information\",\r\n          message: \"Qualification created successfully\",\r\n        })\r\n      );\r\n    },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n};\r\n\r\nexport const updateQualification = (data, id) => dispatch => {\r\n  dispatch(loading());\r\n  return agent.Qualification.edit(id, data).then(c => (response) => {\r\n    dispatch(actionUpdateQualification(response));\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Update qualification Information\",\r\n        message: \"Qualification updated successfully\",\r\n      })\r\n    );\r\n  },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    })\r\n}\r\n\r\nexport const deleteQualification = (id) => dispatch => {\r\n  return agent.Skill.delete(id).then(c => (response) => {\r\n    dispatch(actionDeleteQualification(response));\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Delete Qualification Information\",\r\n        message: \"Qualification deleted successfully\",\r\n      })\r\n    );\r\n  },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    })\r\n}\r\n\r\n//SERVICE GROUPS\r\nexport const loadServiceGroups = (page, limit, loadingType, search) => (dispatch) => {\r\n  dispatch(adminLoading(loadingType));\r\n  return agent.ServiceGroup.load(page, limit, search).then((response) => {\r\n    dispatch(actionLoadServiceGroups(response));\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Service Groups Information\",\r\n        message: \"Service Groups loaded successfully\",\r\n      })\r\n    );\r\n  },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(adminLoading(null));\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n};\r\n\r\nexport const loadServiceGroupsForServiceComponent = (page, limit, loadingType, search) => (dispatch) => {\r\n  dispatch(adminLoading(loadingType));\r\n  return agent.ServiceGroup.loadForService(page, limit, search).then((response) => {\r\n    dispatch(actionLoadServiceGroupsForService(response));\r\n  },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(adminLoading(null));\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n};\r\n\r\nexport const createServiceGroup = (data, loadingType, search) => dispatch => {\r\n  dispatch(adminLoading(loadingType));\r\n  return agent.ServiceGroup.save(data).then(\r\n    (response) => {\r\n      dispatch(actionCreateServiceGroup(response));\r\n      dispatch(loadServiceGroups(1, 10, \"loadServiceGroups\", search));\r\n      dispatch(loadServiceGroupsForServiceComponent(1, 10, \"loadServiceGroupsForService\", \"\"));\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Create Service Group\",\r\n          message: \"Service Group created successfully\",\r\n        })\r\n      );\r\n    },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoading(null));\r\n      dispatch(adminLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n};\r\n\r\nexport const updateServiceGroup = (data, id, loadingType, globalFilter) => dispatch => {\r\n  dispatch(adminLoading(loadingType));\r\n  return agent.ServiceGroup.edit(id, data).then(\r\n    response => {\r\n      //handle success\r\n      if (data.description.includes(globalFilter) || data.name.includes(globalFilter)) {\r\n        dispatch(actionUpdateServiceGroup(response));\r\n      }\r\n      else {\r\n        dispatch(loadServiceGroups(1, 10, \"loadServiceGroups\", globalFilter));\r\n        dispatch(loadServiceGroupsForServiceComponent(1, 10, \"loadServiceGroupsForService\", globalFilter));\r\n        dispatch(loadServices(1, 10, \"loadServices\", \"\"))\r\n      }\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Update Service Group Information\",\r\n          message: \"Service Group updated successfully\",\r\n        })\r\n      );\r\n    },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(adminLoading(null));\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    })\r\n}\r\n\r\nexport const deleteServiceGroup = (id, loadingType, globalFilter) => dispatch => {\r\n  dispatch(adminLoading(loadingType));\r\n  return agent.ServiceGroup.delete(id).then(\r\n    (response) => {\r\n      dispatch(adminLoading(null));\r\n      dispatch(loading());\r\n      dispatch(loadServiceGroups(1, 10, \"loadServiceGroup\", globalFilter));\r\n      dispatch(loadServiceGroupsForServiceComponent(1, 10, \"loadServiceGroupForService\", \"\"));\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Delete Service Group\",\r\n          message: \"Service group deleted successfully\",\r\n        })\r\n      );\r\n    },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(adminLoading(null));\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n}\r\n\r\n//SERVICES\r\nexport const loadServices = (page, limit, loadingType, search) => (dispatch) => {\r\n  dispatch(adminLoading(loadingType))\r\n  return agent.Service.load(page, limit, search).then((response) => {\r\n    dispatch(actionLoadServices(response));\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Services Information\",\r\n        message: \"Services loaded successfully\",\r\n      })\r\n    );\r\n  },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(adminLoading(null));\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n};\r\n\r\nexport const createService = (data, loadingType) => dispatch => {\r\n  dispatch(adminLoading(loadingType))\r\n  return agent.Service.save(data).then(\r\n    (response) => {\r\n      dispatch(actionCreateService(response));\r\n      dispatch(loadServices(1, 10, \"loadServices\", \"\"))\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Update Service Information\",\r\n          message: \"Service updated successfully\",\r\n        })\r\n      );\r\n    },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoadedError());\r\n      dispatch(adminLoading(null));\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n};\r\n\r\nexport const updateService = (data, id, loadingType, globalFilter) => dispatch => {\r\n  dispatch(adminLoading(loadingType));\r\n  return agent.Service.edit(id, data).then(response => {\r\n    dispatch(adminLoading())\r\n    if (data.description.includes(globalFilter) || data.name.includes(globalFilter)) {\r\n      dispatch(actionUpdateService(response));\r\n    }\r\n    else {\r\n      dispatch(loadServices(1, 10, \"loadServices\", globalFilter));\r\n    }\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Update skill Information\",\r\n        message: \"Service updated successfully\",\r\n      })\r\n    );\r\n  },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoading(null))\r\n      dispatch(adminLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    })\r\n}\r\n\r\nexport const deleteService = (id) => dispatch => {\r\n  return agent.Service.delete(id).then(\r\n    (response) => {\r\n      dispatch(loadServices(1, 10, \"loadServices\", \"\"))\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Delete Service\",\r\n          message: \"Service deleted successfully\",\r\n        })\r\n      );\r\n    },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(adminLoading(null));\r\n      dispatch(adminLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n}","import { showMessage } from \"./notification\";\r\nimport agent from \"../../services/agent.service\";\r\nimport { MESSAGE_TYPE } from \"../constant\";\r\n\r\n// initial values\r\nconst contact = {\r\n  loadingContact: \"\",\r\n  pendingRequests: { data: {}, meta: {}, ids: [] },\r\n  freeUsers: { data: {}, meta: {}, ids: [] },\r\n  contacts: { data: {}, meta: {}, ids: [] },\r\n  error: null\r\n};\r\n\r\n//Action types\r\nconst LOAD_FREE_USERS = \"LOAD_FREE_USERS\";\r\nconst LOAD_CONTACTS = \"LOAD_CONTACTS\";\r\nconst LOAD_PENDING_REQUESTS = \"LOAD_PENDING_REQUESTS\";\r\nconst LOADING_CONTACT = \"LOADING\";\r\nconst ERROR = \"ERROR\";\r\nconst CONTACT_ADDED = \"CONTACT_ADDED\";\r\nconst CONTACT_DELETED = \"CONTACT_DELETED\";\r\nconst REMOVE_PENDING = \"REMOVE_PENDING\";\r\nconst REQUEST_SENT = \"REQUEST_SENT\";\r\n\r\n//Reducer\r\nexport default function reducer(state = contact, action = {}) {\r\n  switch (action.type) {\r\n    case LOADING_CONTACT:\r\n      return {\r\n        ...state,\r\n        loadingContact: action.payload,\r\n      };\r\n    case LOAD_FREE_USERS:\r\n      const data = action.payload\r\n      const uniqueFreeIds = [];\r\n      if (state?.loadingContact === \"loadMore\") {\r\n        const idArray = Array.from(new Set([\r\n          ...state.freeUsers.ids,\r\n          ...data.map(({ id }) => id),\r\n        ]));\r\n        uniqueFreeIds.push(...idArray)\r\n      }\r\n      else {\r\n        const idArray = Array.from(new Set([\r\n          ...data.map(({ id }) => id),\r\n        ]));\r\n        uniqueFreeIds.push(...idArray)\r\n      }\r\n      const normalizedFreeUsers = data.reduce((acc, freeUser) => {\r\n        acc[freeUser.id] = freeUser;\r\n        return acc;\r\n      }, {});\r\n      return {\r\n        ...state,\r\n        freeUsers: {\r\n          ids: uniqueFreeIds,\r\n          data: {\r\n            ...state.freeUsers.data,\r\n            ...normalizedFreeUsers\r\n          },\r\n          meta: {}\r\n        },\r\n        loadingContact: null\r\n      };\r\n    case LOAD_CONTACTS:\r\n      const contactArray = action.payload\r\n      const uniqueContactIds = [];\r\n      if (state?.loadingContact === \"loadMoreContacts\") {\r\n        const idArray = Array.from(new Set([\r\n          ...state.contacts.ids,\r\n          ...contactArray.map(({ id }) => id),\r\n        ]));\r\n        uniqueContactIds.push(...idArray)\r\n      }\r\n      else {\r\n        const idArray = Array.from(new Set([\r\n          ...contactArray.map(({ id }) => id),\r\n        ]));\r\n        uniqueContactIds.push(...idArray)\r\n      }\r\n      const normalizedContacts = contactArray.reduce((acc, contact) => {\r\n        acc[contact.id] = contact;\r\n        return acc;\r\n      }, {});\r\n      return {\r\n        ...state,\r\n        contacts: {\r\n          ids: uniqueContactIds,\r\n          data: {\r\n            ...state.contacts.data,\r\n            ...normalizedContacts\r\n          },\r\n          meta: {}\r\n        },\r\n        loadingContact: null\r\n      };\r\n    case CONTACT_ADDED:\r\n      console.log(\"contact added\", action.payload)\r\n      return {\r\n        ...state,\r\n        contacts: {\r\n          ...state.contacts,\r\n          ids: [action.payload.id, ...state.contacts.ids],\r\n          data: { [action.payload.id]: action.payload, ...state.contacts.data }\r\n        }\r\n      };\r\n    case REQUEST_SENT:\r\n      const sentRequestId = action.id;\r\n      const updatedRequestArray = [...state.freeUsers.ids]\r\n      updatedRequestArray.splice(updatedRequestArray.indexOf(sentRequestId), 1)\r\n      console.log(\"request sent\", sentRequestId, updatedRequestArray)\r\n      return {\r\n        ...state,\r\n        freeUsers: {\r\n          ...state.freeUsers,\r\n          ids: updatedRequestArray,\r\n        }\r\n      };\r\n    case CONTACT_DELETED:\r\n      const deletedId = action.id;\r\n      const updatedIdArray = [...state.contacts.ids]\r\n      updatedIdArray.splice(state.contacts.ids.indexOf(deletedId), 1)\r\n      return {\r\n        ...state,\r\n        contacts: {\r\n          ...state.contacts,\r\n          ids: updatedIdArray\r\n        }\r\n      };\r\n    case LOAD_PENDING_REQUESTS:\r\n      const pendingArray = action.payload\r\n      const uniquePendingIds = [];\r\n      if (state?.loadingContact === \"loadMorePending\") {\r\n        const idArray = Array.from(new Set([\r\n          ...state.pendingRequests.ids,\r\n          ...pendingArray.map(({ id }) => id),\r\n        ]));\r\n        uniquePendingIds.push(...idArray)\r\n      }\r\n      else {\r\n        const idArray = Array.from(new Set([\r\n          ...pendingArray.map(({ id }) => id),\r\n        ]));\r\n        uniquePendingIds.push(...idArray)\r\n      }\r\n      const normalizedPending = pendingArray.reduce((acc, pendingRequest) => {\r\n        acc[pendingRequest.id] = pendingRequest;\r\n        return acc;\r\n      }, {});\r\n      return {\r\n        ...state,\r\n        pendingRequests: {\r\n          ids: uniquePendingIds,\r\n          data: {\r\n            ...state.contacts.data,\r\n            ...normalizedPending\r\n          },\r\n          meta: {}\r\n        }\r\n      };\r\n    case REMOVE_PENDING:\r\n      const pendingId = action.id;\r\n      const updatedPendingArray = [...state.pendingRequests.ids]\r\n      updatedPendingArray.splice(state.pendingRequests.ids.indexOf(pendingId), 1)\r\n      return {\r\n        ...state,\r\n        pendingRequests: {\r\n          ...state.pendingRequests,\r\n          ids: updatedPendingArray\r\n        }\r\n      };\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        loadingContact: null\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n//Action Creators\r\nexport const freeUsersLoaded = (data) => ({\r\n  type: LOAD_FREE_USERS,\r\n  payload: data,\r\n});\r\nexport const loadingContact = (data) => ({\r\n  type: LOADING_CONTACT,\r\n  payload: data\r\n});\r\nexport const isError = (data) => ({\r\n  type: ERROR,\r\n  payload: data\r\n});\r\nexport const contactsLoaded = (data) => ({\r\n  type: LOAD_CONTACTS,\r\n  payload: data,\r\n});\r\nexport const pendingRequestsLoaded = (data) => ({\r\n  type: LOAD_PENDING_REQUESTS,\r\n  payload: data,\r\n});\r\nexport const contactDeleted = (id) => ({\r\n  type: CONTACT_DELETED,\r\n  id: id,\r\n});\r\nexport const addContact = (data) => ({\r\n  type: CONTACT_ADDED,\r\n  payload: data\r\n});\r\nexport const removeFromPending = (id) => ({\r\n  type: REMOVE_PENDING,\r\n  id: id\r\n});\r\nexport const requestSent = (data) => ({\r\n  type: REQUEST_SENT,\r\n  id: data.contactId\r\n});\r\n\r\n//Actions\r\nexport function loadFreeUsers(page, limit, loadingType, search) {\r\n  return dispatch => {\r\n    dispatch(loadingContact(loadingType));\r\n    return agent.Contact.load(page, limit, search).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Load Users\",\r\n            message: \"Users Loaded\",\r\n          })\r\n        );\r\n        dispatch(freeUsersLoaded(response));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(loadingContact(null));\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function loadContacts(page, take, loadingType) {\r\n  return dispatch => {\r\n    dispatch(loadingContact(loadingType));\r\n    return agent.Contact.loadContacts(page, take).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Load Contacts\",\r\n            message: \"Contacts Loaded\"\r\n          })\r\n        );\r\n        dispatch(contactsLoaded(response));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n        dispatch(loadingContact(\"\"));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function loadPendingRequests(page, take, loadingType) {\r\n  return dispatch => {\r\n    dispatch(loadingContact(loadingType));\r\n    return agent.Contact.loadRequests(page, take).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(loadingContact(\"\"));\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Load Pending Requests\",\r\n            message: \"Pending Contact Requests Loaded\",\r\n          })\r\n        );\r\n        dispatch(pendingRequestsLoaded(response));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n        dispatch(loadingContact(\"\"));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function sendContactRequest(id) {\r\n  return dispatch => {\r\n    dispatch(loadingContact(\"sendContactRequest\"));\r\n    dispatch(isError(null));\r\n    return agent.Contact.add(id).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Send Connection Request\",\r\n            message: \"Request sent\",\r\n          }),\r\n        );\r\n        dispatch(requestSent(id));\r\n        dispatch(loadingContact(\"\"));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n        dispatch(loadingContact(\"\"));\r\n        dispatch(isError(\"requestFail\"));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function removeContact(id) {\r\n  return dispatch => {\r\n    return agent.Contact.delete(id).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Remove Contact\",\r\n            message: \"Contact removed successfully\",\r\n          })\r\n        );\r\n        dispatch(contactDeleted(id));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n        dispatch(isError(\"requestFail\"));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function acceptRequest(id, loadingType, accountDetails) {\r\n  return dispatch => {\r\n    dispatch(isError(null));\r\n    dispatch(loadingContact(loadingType));\r\n    return agent.Contact.accept(id).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Connection Request\",\r\n            message: \"Added to contact successfully\",\r\n          }),\r\n        );\r\n        dispatch(addContact(accountDetails))\r\n        dispatch(removeFromPending(id))\r\n        dispatch(loadingContact(null))\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(loadingContact(null))\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n        dispatch(isError(\"acceptFail\"));\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function rejectRequest(id, loadingType) {\r\n  return dispatch => {\r\n    dispatch(isError(null));\r\n    dispatch(loadingContact(loadingType));\r\n    return agent.Contact.reject(id).then(\r\n      response => {\r\n        //handle success\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Connection Request\",\r\n            message: \"Connection request rejected successfully\",\r\n          }),\r\n        );\r\n        dispatch(removeFromPending(id))\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(loadingContact(\"\"))\r\n        dispatch(isError(\"rejectFail\"));\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  }\r\n}","\r\n// initial values\r\nconst emoji = {\r\n  name: null,\r\n  visible: false,\r\n};\r\n\r\n\r\n// Action types\r\nconst EMOJI_PICKER_OPEN = 'EMOJI_PICKER_OPEN';\r\nconst EMOJI_PICKER_CLOSED = 'EMOJI_PICKER_CLOSED';\r\n\r\n\r\n//Action Creator\r\nexport function onEmojiPickerOpen(name) {\r\n  return { type: EMOJI_PICKER_OPEN, payload: name };\r\n}\r\n\r\nexport function onEmojiPickerClosed(name) {\r\n  return { type: EMOJI_PICKER_CLOSED, payload: name };\r\n}\r\n\r\n\r\n// Reducer\r\nexport default function reducer(state = emoji, action) {\r\n  switch (action.type) {\r\n    case EMOJI_PICKER_OPEN:\r\n      return {\r\n        ...state,\r\n        name: action.payload,\r\n        visible: true,\r\n      };\r\n    case EMOJI_PICKER_CLOSED:\r\n      return {\r\n        ...state,\r\n        name: \"\",\r\n        visible: false,\r\n      };\r\n    default: return state\r\n  }\r\n};\r\n\r\n//Actions\r\nexport function openEmojiPicker(name) {\r\n  return dispatch => {\r\n    return dispatch(onEmojiPickerOpen(name))\r\n  }\r\n}\r\n\r\n//Actions\r\nexport function closeEmojiPicker() {\r\n  return dispatch => {\r\n    dispatch(onEmojiPickerClosed())\r\n  }\r\n}\r\n\r\n","import { MESSAGE_TYPE } from \"store/constant\";\r\nimport agent from \"../../services/agent.service\";\r\nimport { showMessage } from \"./notification\";\r\n\r\nconst INITIAL_STATE = {\r\n  loading: false,\r\n  companyInfo: {\r\n    name: \"\",\r\n    profile: \"\",\r\n    logo: \"\",\r\n    yearOfEstablishment: 0,\r\n    email: \"\",\r\n    phoneNumber: \"\",\r\n    contactPerson: \"\",\r\n    noOfEmployees: 0,\r\n    industry: \"\",\r\n    registrationNo: \"\",\r\n    website: \"\",\r\n    address: \"\",\r\n    city: \"\",\r\n    stateName: \"\",\r\n    stateId: \"\",\r\n    countryId: \"\",\r\n    countryName: \"\",\r\n    contractPerson: \"\",\r\n  },\r\n};\r\n\r\n// Action types\r\nconst LOADING = \"LOADING\";\r\nconst LOAD_COMPANY_INFO = \"LOAD_COMPANY_INFO\";\r\nconst LOAD_COMPANY_INFO_ERROR = \"LOAD_COMPANY_INFO_ERROR\";\r\n\r\n// Reducer\r\nexport default function reducer(state = INITIAL_STATE, action = {}) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return { ...state, loading: true };\r\n    case LOAD_COMPANY_INFO:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        companyInfo: action.payload,\r\n      };\r\n    case LOAD_COMPANY_INFO_ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Action Creators\r\nexport function companyInfoLoaded(data) {\r\n  return { type: LOAD_COMPANY_INFO, payload: data };\r\n}\r\nexport const companyInfoLoadedError = () => ({\r\n  type: LOAD_COMPANY_INFO_ERROR,\r\n});\r\nexport const loading = () => ({\r\n  type: LOADING,\r\n});\r\n\r\n// Actions\r\nexport function updateCompanyInfo(data) {\r\n  return (dispatch) => {\r\n    dispatch(loading());\r\n    return agent.Account.updateCompanyInfo(data).then(\r\n      (response) => {\r\n        dispatch(companyInfoLoaded(response));\r\n        //   dispatch(closeModal());\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Company Information\",\r\n            message: \"Company info updated successfully\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(companyInfoLoadedError());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\nexport function loadCompanyInfo() {\r\n    return (dispatch) => {\r\n      return agent.Company.load().then((response) => {\r\n        console.log('company info', response);\r\n        dispatch(companyInfoLoaded(response));\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Company Information\",\r\n            message: \"Company info loaded successfully\",\r\n          })\r\n        );\r\n      });\r\n    };\r\n  }","import { showMessage } from './notification';\r\nimport { push } from \"connected-react-router\";\r\nimport agent from \"../../services/agent.service\";\r\nimport { MESSAGE_TYPE } from \"store/constant\";\r\n\r\n// initial values\r\nconst Initial_State = {\r\n    review: [],\r\n    reviews: [],\r\n    loading: false\r\n};\r\n\r\n\r\n// Action types\r\nconst CREATE_REVIEW = 'app/instantJob/CREATE_REVIEW';\r\nconst LOAD_REVIEWS = 'app/instantJob/LOAD_REVIEWS';\r\nconst LOAD_APPLICANT_REVIEW = 'app/instantJob/LOAD_APPLICANT_REVIEW';\r\nconst LOADING = \"LOADING\";\r\n\r\n\r\n// Reducer\r\nexport default function reducer(state = Initial_State, action = {}) {\r\n    switch (action.type) {\r\n        case CREATE_REVIEW:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                fetching: false,\r\n                review: action.payload\r\n            };\r\n        case LOAD_REVIEWS:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                fetching: false,\r\n                reviews: action.payload\r\n            };\r\n        case LOAD_APPLICANT_REVIEW:\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                fetching: false,\r\n                review: action.payload\r\n            };\r\n\r\n        case LOADING:\r\n            return {\r\n                ...state,\r\n                loading: action.payload,\r\n                error: null\r\n            };\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\n// Action Creator\r\nexport const isRequestLoading = (data) => ({\r\n    type: LOADING,\r\n    payload: data,\r\n});\r\n\r\n// export const createReview = (data) => ({\r\n//     type: CREATE_REVIEW,\r\n//     payload: data,\r\n// })\r\n\r\nexport const loadReviews = (data) => ({\r\n    type: LOAD_REVIEWS,\r\n    payload: data,\r\n})\r\n\r\nexport const loadApplicantReview = (data) => ({\r\n    type: LOAD_APPLICANT_REVIEW,\r\n    payload: data,\r\n})\r\n\r\n// Actions\r\nexport function createReview(data) {\r\n    return dispatch => {\r\n        dispatch(isRequestLoading(true));\r\n        return agent.Review.save(data).then(\r\n            response => {\r\n                //handle success\r\n                dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"Review successfully created\", title: 'Review Successfully created ' }));\r\n                dispatch(push(\"/instant-hires\"));\r\n                dispatch(isRequestLoading(false));\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to create review\" }));\r\n                dispatch(isRequestLoading(false));\r\n\r\n            }\r\n        )\r\n    }\r\n}\r\nexport function loadApplicantReviews(id, page, limit) {\r\n    return dispatch => {\r\n        dispatch(isRequestLoading(true));\r\n        return agent.Review.loadByApplicant(id, page, limit).then(\r\n            response => {\r\n                //handle success\r\n                dispatch(loadApplicantReview(response));\r\n                dispatch(isRequestLoading(false));\r\n\r\n            },\r\n            error => {\r\n                dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to load applicant reviews\" }));\r\n                dispatch(isRequestLoading(false));\r\n\r\n            }\r\n        )\r\n    }\r\n}\r\n// export function createInstantJob(instantjob) {\r\n//     return dispatch => {\r\n//         dispatch(isRequestLoading(true));\r\n//         return agent.InstantJob.save(instantjob).then(\r\n//             response => {\r\n//                 dispatch(isRequestLoading(false));\r\n//                 // handle success\r\n//                 dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: \"Instant Job successful created\", title: 'Instant job create Successful' }));\r\n//                 dispatch(push(\"/instant-hires\"));\r\n\r\n//             }, error => { // handle error\r\n//                 dispatch(showMessage({ type: \"error\", message: error, title: \"Failed to create Instant job\" }));\r\n//                 dispatch(isRequestLoading(false));\r\n//             });\r\n//     }\r\n// }","import { showMessage } from \"./notification\";\r\nimport agent from \"../../services/agent.service\";\r\nimport { MESSAGE_TYPE } from \"../constant\";\r\nimport { closeModal } from \"./modal\";\r\n\r\n// initial values\r\nconst userSkill = {\r\n  name: \"\",\r\n  description: \"\",\r\n  updatedOrDeleted: false,\r\n  loading: false,\r\n};\r\n\r\n// Action types\r\nconst UPDATE_USER_SKILL = \"app/userSkill/UPDATE_USER_SKILL \";\r\nconst LOAD_USER_SKILL = \"app/userSkill/LOAD_USER_SKILL\";\r\nconst DELETE_USER_SKILL = \"DELETE_USER_SKILL\";\r\nconst LOADING = \"LOADING\";\r\nconst USER_SKILL_ERROR = \"USER_SKILL_ERROR\";\r\n\r\n// Reducer\r\nexport default function reducer(state = userSkill, action = {}) {\r\n  switch (action.type) {\r\n    case UPDATE_USER_SKILL:\r\n      return {\r\n        ...state,\r\n        userSkill: action.payload,\r\n        updatedOrDeleted: true,\r\n      };\r\n    case LOAD_USER_SKILL:\r\n      return {\r\n        ...state,\r\n        userSkill: action.payload.data,\r\n      };\r\n    case DELETE_USER_SKILL:\r\n      return {\r\n        ...state,\r\n        updatedOrDeleted: true,\r\n        loading: false,\r\n      };\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        updatedOrDeleted: false,\r\n        loading: true,\r\n      };\r\n    case USER_SKILL_ERROR:\r\n      return {\r\n        ...state,\r\n        updatedOrDeleted: false,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Action Creators\r\nexport function loading() {\r\n  return { type: LOADING };\r\n}\r\nexport function userSkillLoaded(data) {\r\n  return { type: LOAD_USER_SKILL, payload: data };\r\n}\r\n\r\nexport function createUserSkill(data) {\r\n  return { type: UPDATE_USER_SKILL, payload: data };\r\n}\r\nexport function deleteUserSkill() {\r\n  return { type: DELETE_USER_SKILL };\r\n}\r\nexport function userSkillError() {\r\n  return { type: USER_SKILL_ERROR };\r\n}\r\n// Actions\r\nexport function loadUserSkills() {\r\n  return (dispatch) => {\r\n    return agent.UserSkill.load().then((response) => {\r\n      dispatch(userSkillLoaded(response));\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Profile Information\",\r\n          message: \"User skill loaded successfully\",\r\n        })\r\n      );\r\n    });\r\n  };\r\n}\r\n\r\nexport function createSkill(userskill) {\r\n  return (dispatch) => {\r\n    dispatch(loading())\r\n    return agent.UserSkill.save(userskill).then(\r\n      (response) => {\r\n        dispatch(createUserSkill(response));\r\n        dispatch(closeModal());\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Update Profile Information\",\r\n            message: \"User skill created successfully\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n        dispatch(userSkillError());\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport function deleteSkill(id) {\r\n  return (dispatch) => {\r\n    dispatch(loading());\r\n    return agent.UserSkill.delete(id).then(\r\n      (response) => {\r\n        dispatch(deleteUserSkill(response));\r\n        dispatch(\r\n          showMessage({\r\n            type: MESSAGE_TYPE.SUCCESS,\r\n            title: \"Deleted Profile Information\",\r\n            message: \"User skill deleted successfully\",\r\n          })\r\n        );\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n        dispatch(userSkillError());\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\n// export function updateContactInfo(data) {\r\n//     return dispatch => {\r\n//         return agent.Account.updateContactInfo(data).then(response => {\r\n//             dispatch(profileInfoLoaded(response));\r\n//             dispatch(closeModal());\r\n//             dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, title: \"Update Profile Information\", message: (\"Contact information updated successfully\") }));\r\n//         },\r\n//             error => { // handle error\r\n//                 dispatch(showMessage({ type: \"error\", message: error }));\r\n//             }\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export function updateUserHobies(hobbies) {\r\n//     return dispatch => {\r\n//         return agent.Account.updateHobies(hobbies).then(response => {\r\n//             dispatch(profileInfoLoaded(response));\r\n//             dispatch(closeModal());\r\n//             dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, title: \"Update Profile Information\", message: (\"Hobbies updated successfully\") }));\r\n//         },\r\n//             error => { // handle error\r\n//                 dispatch(showMessage({ type: \"error\", message: error }));\r\n//             }\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export function updateProfilePicture(image) {\r\n//     return dispatch => {\r\n//         return agent.Account.updateProfilePicture(image).then(response => { // handle success\r\n//             dispatch(showMessage({ type: MESSAGE_TYPE.SUCCESS, message: (\"Profile image successfully updated\") }));\r\n//         }, error => { // handle error\r\n//             dispatch(showMessage({ type: \"error\", message: error }));\r\n//         });\r\n//     }\r\n// }\r\n\r\n// export function loadAccountByUser(id) {\r\n//     return dispatch => {\r\n//         return agent.Account.getByID(id).then(response => { // handle success\r\n//             // dispatch(LoadProfileDataByUser(response))\r\n\r\n//         }, error => { // handle error\r\n//             dispatch(showMessage({ type: \"error\", message: error }));\r\n//         });\r\n//     }\r\n// }\r\n","import agent from \"../../services/agent.service\";\r\nimport { closeModal } from \"./modal\";\r\nimport { showMessage } from \"./notification\";\r\nimport { MESSAGE_TYPE } from \"../constant\";\r\n\r\n\r\n//INITIAL STATE\r\nconst INITIAL_STATE = {\r\n  loading: false,\r\n  submitting: false,\r\n  data: {\r\n    institution: \"\",\r\n    qualification: \"\",\r\n    course: \"\",\r\n    yearOfGraduation: \"2021-05-13T23:23:26.438Z\",\r\n    address: \"\",\r\n    city: \"\",\r\n    country: \"\",\r\n    id: \"\",\r\n  },\r\n  updatedOrDeleted: false,\r\n};\r\n\r\n//ACTION TYPES\r\nconst UPDATE_EDUCATION = \"UPDATE_EDUCATION\";\r\nconst LOAD_EDUCATION = \"LOAD_EDUCATION\";\r\nconst LOADING_EDUCATION = \"LOADING_EDUCATION\";\r\nconst LOAD_EDUCATION_ERROR = \"LOAD_EDUCATION_ERROR\";\r\nconst SUBMITTING = \"SUBMITTING\"\r\n\r\n//REDUCER\r\nexport default function reducer(state = INITIAL_STATE, action = {}) {\r\n  switch (action.type) {\r\n    case SUBMITTING:\r\n      return {\r\n        ...state,\r\n        submitting: true\r\n      }\r\n    case LOADING_EDUCATION:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        updatedOrDeleted: false,\r\n      };\r\n    case UPDATE_EDUCATION:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        submitting: false,\r\n        data: action.payload,\r\n        updatedOrDeleted: true,\r\n      };\r\n    case LOAD_EDUCATION:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        submitting: false,\r\n        data: action.payload,\r\n        updatedOrDeleted: false,\r\n      };\r\n    case LOAD_EDUCATION_ERROR:\r\n      return { ...state, loading: false,submitting: false, updatedOrDeleted: false };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n//ACTION CREATORS\r\nexport const isLoading = () => ({\r\n  type: LOADING_EDUCATION,\r\n});\r\nexport const isSubmitting = () => ({\r\n  type: SUBMITTING\r\n})\r\nexport const educationLoaded = (data) => ({\r\n  type: LOAD_EDUCATION,\r\n  payload: data,\r\n});\r\n\r\nexport const createUserEducation = (data) => ({\r\n  type: UPDATE_EDUCATION,\r\n  payload: data,\r\n});\r\n\r\nexport const educationLoadedError = () => ({\r\n  type: LOAD_EDUCATION_ERROR,\r\n});\r\n\r\n//ACTIONS\r\nexport const loadEducation = () => (dispatch) => {\r\n  return agent.Education.load().then((response) => {\r\n    dispatch(educationLoaded(response));\r\n    dispatch(\r\n      showMessage({\r\n        type: MESSAGE_TYPE.SUCCESS,\r\n        title: \"Profile Information\",\r\n        message: \"Education loaded successfully\",\r\n      })\r\n    );\r\n  });\r\n};\r\n\r\nexport const createEducation = (education) => (dispatch) => {\r\n  dispatch(isLoading());\r\n  return agent.Education.save(education).then(\r\n    (response) => {\r\n      dispatch(createUserEducation(response));\r\n      dispatch(closeModal());\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Update Profile Information\",\r\n          message: \"Education created successfully\",\r\n        })\r\n      );\r\n    },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(educationLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n};\r\n\r\nexport const updateEducation = (id, education) => (dispatch) => {\r\n  dispatch(isLoading());\r\n  return agent.Education.edit(id, education).then(\r\n    (response) => {\r\n      dispatch(createUserEducation(response));\r\n      dispatch(closeModal());\r\n      dispatch(\r\n        showMessage({\r\n          type: MESSAGE_TYPE.SUCCESS,\r\n          title: \"Update Profile Information\",\r\n          message: \"Education updated successfully\",\r\n        })\r\n      );\r\n    },\r\n    (error) => {\r\n      // handle error\r\n      dispatch(educationLoadedError());\r\n      dispatch(showMessage({ type: \"error\", message: error }));\r\n    }\r\n  );\r\n};\r\n","import { showMessage } from \"./notification\";\r\nimport agent from \"../../services/agent.service\";\r\n// INITIAL STATE\r\nconst INITIAL_STATE = {\r\n  loading: false,\r\n  countries: [],\r\n  states: [],\r\n  lga: [],\r\n};\r\n\r\n// ACTION TYPES\r\nconst LOAD_REQUEST = \"LOAD_REQUEST\";\r\nconst LOAD_COUNTRIES = \"LOAD_COUNTRIES\";\r\nconst LOAD_STATES = \"LOAD_STATES\";\r\nconst LOAD_LGA = \"LOAD_LGA\";\r\nconst LOAD_ERROR = 'LOAD_ERROR';\r\n\r\n// Reducers\r\nexport default function reducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case LOAD_REQUEST:\r\n      return { ...state, loading: true };\r\n    case LOAD_COUNTRIES:\r\n      return { ...state, countries: action.payload, loading: false };\r\n    case LOAD_STATES:\r\n      return { ...state, states: action.payload, loading: false };\r\n    case LOAD_LGA:\r\n      return { ...state, lga: action.payload, loading: false };\r\n    case LOAD_ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n// Action Creators\r\nexport const loading = () => ({ type: LOAD_REQUEST });\r\nexport const loadingFailure = () => ({\r\n  type: LOAD_ERROR,\r\n});\r\nexport const loadCountries = (countries) => ({\r\n  type: LOAD_COUNTRIES,\r\n  payload: countries,\r\n});\r\n\r\nexport const loadStates = (states) => ({\r\n  type: LOAD_STATES,\r\n  payload: states,\r\n});\r\n\r\nexport const loadLGA = (lga) => ({\r\n  type: LOAD_LGA,\r\n  payload: lga,\r\n});\r\n\r\n// Actions\r\nexport function fetchCountries() {\r\n  return (dispatch) => {\r\n    return agent.Country.load().then(\r\n      (response) => {\r\n        dispatch(loadCountries(response));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(loadingFailure());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\nexport function fetchStates(countryId) {\r\n  return (dispatch) => {\r\n    return agent.State.loadByCountry(countryId).then(\r\n      (response) => {\r\n        dispatch(loadStates(response));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(loadingFailure());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\nexport function fetchLGA(stateId) {\r\n  return (dispatch) => {\r\n    return agent.Lga.loadByState(stateId).then(\r\n      (response) => {\r\n        dispatch(loadLGA(response));\r\n      },\r\n      (error) => {\r\n        // handle error\r\n        dispatch(loadingFailure());\r\n        dispatch(showMessage({ type: \"error\", message: error }));\r\n      }\r\n    );\r\n  };\r\n}\r\n","import React from 'react';\r\n\r\nconst AppLoading = () => {\r\n    return (\r\n        <div id=\"loading-area\"></div>\r\n    )\r\n}\r\n\r\nexport default AppLoading;\r\n","import agent from \"../../services/agent.service\";\r\nimport { push } from \"connected-react-router\";\r\n\r\n\r\n// initial values\r\nconst common = {\r\n    routeRestrictedMode: false\r\n};\r\n\r\n// Action types\r\nconst ROUTE_RESTRICTED_MODE = 'pharmaconnect/common/ROUTE_RESTRICTED_MODE';\r\n\r\n\r\n//Action Creator\r\nexport function onRouteRestricted() {\r\n    return { type: ROUTE_RESTRICTED_MODE, payload: true };\r\n}\r\n\r\nexport function onRouteRestrictedCancelled() {\r\n    return { type: ROUTE_RESTRICTED_MODE, payload: false };\r\n}\r\n\r\n\r\n\r\n//actions\r\n\r\nexport function allowOwnerOnly(resourceAccountId, redirectUrl){\r\n    return (dispatch) => {\r\n        if (resourceAccountId !== agent.Auth.current()?.accountId) {\r\n            dispatch(push(redirectUrl));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Reducer\r\nexport default function reducer(state = common, action) {\r\n    switch (action.type) {\r\n        case ROUTE_RESTRICTED_MODE:\r\n            return {\r\n                ...state,\r\n                routeRestrictedMode: action.payload\r\n            };\r\n        default: return state\r\n    }\r\n};\r\n\r\n\r\n","// initial values\r\nconst error = {\r\n    offline: false\r\n};\r\n\r\n// Action \r\nconst APP_OFFLINE = 'pharmaconnect/error/APP_OFFLINE';\r\n\r\n// Reducer\r\nexport default function reducer(state = error, action = {}) {\r\n    switch (action.type) {\r\n        case APP_OFFLINE:\r\n            return {\r\n                ...state,\r\n                offline: true\r\n            };\r\n        default: return state;\r\n    }\r\n}\r\n\r\n//action creators\r\nexport function offlineErrorOccured(data) {\r\n    return {\r\n        type: APP_OFFLINE\r\n    };\r\n}\r\n\r\n\r\nexport function appGoesOffline() {\r\n    return dispatch => {\r\n        dispatch(offlineErrorOccured())\r\n    }\r\n}\r\n\r\n\r\n\r\n","const initialState = {\r\n    showChatModal: false\r\n}\r\n\r\nconst TOGGLE_CHAT_MODAL = 'TOGGLE_CHAT_MODAL'\r\n\r\nexport default function reducer(state = initialState, action){\r\n    switch(action.type){\r\n        case TOGGLE_CHAT_MODAL:\r\n            return { ...state, showChatModal: !state.showChatModal}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const toggleChatModal = () => ({\r\n    type: TOGGLE_CHAT_MODAL\r\n})","import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\nimport auth from './auth';\r\nimport notification from \"./notification\";\r\nimport account from './account';\r\nimport company from './company';\r\nimport experience from './experience'\r\nimport location from './location';\r\nimport common from './common';\r\nimport error from './error';\r\nimport modal from './modal';\r\nimport userSkill from './userSkill';\r\nimport education from './education';\r\nimport timeline from './timeline';\r\nimport comment from './comment';\r\nimport util from './util';\r\nimport instantJob from './instantJob';\r\nimport job from './job';\r\nimport admin from './admin'\r\nimport contact from './contact'\r\nimport emojiPicker from './emojiPicker'\r\nimport chat from './chat'\r\nimport review from './review'\r\n\r\nconst appReducer = (history) => combineReducers({\r\n  router: connectRouter(history),\r\n  common,\r\n  error,\r\n  auth,\r\n  account,\r\n  company,\r\n  job,\r\n  notification,\r\n  location,\r\n  education,\r\n  experience,\r\n  modal,\r\n  userSkill,\r\n  util,\r\n  instantJob,\r\n  admin,\r\n  timeline,\r\n  comment,\r\n  contact,\r\n  emojiPicker,\r\n  chat,\r\n  review\r\n});\r\n\r\nexport default appReducer;","import { offlineMessageDisplayed, showInfoMessage, successMessageDisplayed } from \"../modules/notification\";\r\n\r\nconst redirectMiddleware = ({ getState, dispatch }) => next => action => {\r\n    next(action);\r\n};\r\n\r\nexport default redirectMiddleware;","import jwtMiddlewares from './jwt-middleware';\r\nimport redirectMiddlewares from './redirect-middleware';\r\nimport loggerMiddleware from './loggerMiddleware';\r\nimport alertMiddleware from './alertMiddleware';\r\n\r\nexport default [\r\n    // jwtMiddlewares,\r\n    redirectMiddlewares,\r\n    // loggerMiddleware,\r\n    // alertMiddleware\r\n]","import { createStore, applyMiddleware } from \"redux\";\r\nimport { createBrowserHistory } from 'history'\r\nimport thunk from 'redux-thunk';\r\nimport appReducer from \"./modules\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { routerMiddleware } from \"connected-react-router\";\r\nimport customeMiddlewares from './middlewares';\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nconst getMiddlewares = () => applyMiddleware(thunk, routerMiddleware(history), ...customeMiddlewares);\r\n\r\nexport default function (preloadedState) {\r\n  const store = createStore(\r\n    appReducer(history),\r\n    preloadedState,\r\n    composeWithDevTools(getMiddlewares()),\r\n  );\r\n\r\n  return store\r\n};","import React, {useEffect, useRef} from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Toast } from 'primereact/toast';\r\nimport './AppAlert.css';\r\n\r\n\r\nconst AppAlert = () => {\r\n    const toast = useRef(null);\r\n    const notification = useSelector(state => state.notification);\r\n\r\n    useEffect(() => {\r\n        \r\n    }, [notification])   \r\n\r\n    return (\r\n        <div>\r\n        <Toast ref={toast} />\r\n        {notification.type === 'success' && toast.current.show({severity:'success', summary: notification.title, detail: notification.message, life: 5000})}\r\n        {notification.type === 'error' && toast.current.show({severity:'error', summary: notification.title, detail: notification.message, life: 5000})}\r\n        {notification.type === 'info' && toast.current.show({severity:'info', summary: notification.title, detail: notification.message, life: 5000})}\r\n        {notification.type === 'warning' && toast.current.show({severity:'warn', summary: notification.title, detail: notification.message, life: 5000})}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppAlert;","import React from 'react';\r\n\r\nimport './styles/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport 'primeflex/primeflex.css';\r\n\r\nimport './App.css';\r\n\r\nimport AppLoading from './components/AppLoading';\r\nimport AppAlert from 'components/AppAlert';\r\n\r\nconst AppRouter = React.lazy(() => import(\"./routes/app-router\"));\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Suspense fallback={<AppLoading />}>\r\n      <AppAlert />\r\n      <AppRouter />\r\n    </React.Suspense>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport configureStore, { history } from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport ErrorBoundary from \"pages/error-page/error-boundary\";\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <Router>\r\n        <ConnectedRouter history={history}>\r\n          <Route component={App} />\r\n        </ConnectedRouter>\r\n      </Router>\r\n    </Provider>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n            error: null,\r\n            errorInfo: null\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({\r\n            hasError: true,\r\n            error: error,\r\n            errorInfo: info\r\n        });\r\n        //show error\r\n    }\r\n\r\n    render(){\r\n        if(this.state.errorInfo){\r\n            return (<div className=\"container\">\r\n                <div className=\"p-d-flex justify-content-center align-items-center\">\r\n                <h3>Something went wrong</h3>\r\n                {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo.componentStack}\r\n                <a href=\"/\" className=\"btn btn-primary\">Go Home</a> <a href=\"/login\" className=\"btn btn-danger\">Login</a>\r\n                </div>\r\n            </div>)\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary"],"sourceRoot":""}