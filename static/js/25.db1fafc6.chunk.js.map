{"version":3,"sources":["pages/admin/dashboard/AdminServiceGroups.js","pages/admin/dashboard/AdminServices.js","pages/admin/dashboard/AdminServicesAndServiceGroups.js"],"names":["AdminServiceGroups","dispatch","useDispatch","loading","useSelector","state","admin","adminLoading","serviceGroups","useState","page","setPage","pageLimit","setPageLimit","globalFilter","setGlobalFilter","serviceGroup","setServiceGroup","totalCapacity","setTotalCapacity","serviceGroupToDelete","setServiceGroupToDelete","useForm","mode","reValidateMode","serviceGroupRegister","register","handleServiceGroupSubmit","handleSubmit","setServiceGroupValue","setValue","serviceGroupErrors","formState","errors","clearServiceGroupErrors","clearErrors","useEffect","loadServiceGroups","meta","limit","onPaginationChange","event","first","rows","handleServiceGroupChange","e","target","name","value","shouldValidate","handleServiceGroupSearch","header","className","placeholder","onChange","currentTarget","onClick","type","icon","SGActionTemplate","rowData","data","id","description","window","confirm","deleteServiceGroup","dataKey","rowHover","field","body","totalRecords","total","rowsPerPageOptions","onPageChange","getSGTableData","onSubmit","formData","serviceGroupName","serviceGroupDescription","updateServiceGroup","createServiceGroup","htmlFor","message","CustomInputField","inputLabel","inputChange","iconPos","label","disabled","AdminServices","services","serviceGroupOptionsByPage","serviceGroupsForServiceComponent","service","setService","serviceToDelete","setServiceToDelete","serviceGroupOptions","setServiceGroupOptions","selectedServiceGroupOption","setSelectedServiceGroupOption","serviceRegister","handleServiceSubmit","setServiceValue","serviceErrors","clearServiceErrors","loadServices","newArray","map","push","group","groupId","handleServiceSearch","handleServiceChange","SActionTemplate","groupName","deleteService","getSTableData","updateService","createService","dropdown","forceSelection","dropdownMode","suggestions","required","completeMethod","searchValue","query","loadServiceGroupsForServiceComponent","AdminServicesAndServiceGroups"],"mappings":"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","file":"static/js/25.db1fafc6.chunk.js","sourcesContent":["import { Button } from \"primereact/button\"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport CustomInputField from \"components/CustomInputField\";\r\nimport { createServiceGroup, deleteServiceGroup, loadServiceGroups, updateServiceGroup } from \"store/modules/admin\";\r\nimport { Paginator } from 'primereact/paginator';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Column } from 'primereact/column';\r\n\r\nconst AdminServiceGroups = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(state => state.admin.adminLoading);\r\n  const serviceGroups = useSelector((state) => state.admin.serviceGroups);\r\n  const [page, setPage] = useState(1);\r\n  const [pageLimit, setPageLimit] = useState(10);\r\n  const [globalFilter, setGlobalFilter] = useState(\"\");\r\n  const [serviceGroup, setServiceGroup] = useState({});\r\n  const [totalCapacity, setTotalCapacity] = useState(0);\r\n  const [serviceGroupToDelete, setServiceGroupToDelete] = useState(\"\");\r\n  const {\r\n    register: serviceGroupRegister,\r\n    handleSubmit: handleServiceGroupSubmit,\r\n    setValue: setServiceGroupValue,\r\n    formState: { errors: serviceGroupErrors },\r\n    clearErrors: clearServiceGroupErrors,\r\n  } = useForm({ mode: \"onChange\", reValidateMode: \"onChange\" });\r\n\r\n  useEffect(() => {\r\n    dispatch(loadServiceGroups(page, pageLimit, \"loadServiceGroups\", globalFilter));\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    //clear serviceGroupToDelete if error deleting service group\r\n    if (!loading) {\r\n      setServiceGroupToDelete(null);\r\n    }\r\n  }, [loading])\r\n\r\n  useEffect(() => {\r\n    //correct pagination on delete or create of service group\r\n    setTotalCapacity((serviceGroups?.meta?.page - 1) * serviceGroups?.meta?.limit);\r\n    setPage(serviceGroups?.meta?.page)\r\n  }, [serviceGroups])\r\n\r\n  const onPaginationChange = (event) => {\r\n    setPage(event.page + 1)\r\n    setTotalCapacity(event.first);\r\n    setPageLimit(event.rows);\r\n    dispatch(loadServiceGroups(event.page + 1, event.rows, \"loadServiceGroups\", globalFilter));\r\n  }\r\n\r\n  const handleServiceGroupChange = e => {\r\n    setServiceGroup({ ...serviceGroup, [e.target.name]: e.target.value });\r\n    setServiceGroupValue(e.target.name, e.target.value, { shouldValidate: true });\r\n  }\r\n\r\n  const handleServiceGroupSearch = () => {\r\n    dispatch(loadServiceGroups(page, pageLimit, \"searchServiceGroups\", globalFilter));\r\n  }\r\n\r\n  const handleServiceGroupEdit = (data, id) => {\r\n    clearServiceGroupErrors(\"serviceGroup\",)\r\n    setServiceGroup({ ...serviceGroup, id, name: data.name, description: data.description })\r\n    setServiceGroupValue('serviceGroupName', data.name);\r\n    setServiceGroupValue('serviceGroupDescription', data.description);\r\n  }\r\n\r\n  const handleServiceGroupDelete = (id, name) => {\r\n    var confirm = window.confirm(`Do you want to delete the service group \"${name}\"?`);\r\n    if (confirm && id) {\r\n      setServiceGroupToDelete(id);\r\n      if (serviceGroup.id === id) {\r\n        //change update form to create form if update form has service group id of deleted service group\r\n        setServiceGroup({ ...serviceGroup, id: null });\r\n      }\r\n      dispatch(deleteServiceGroup(id, \"deleteServiceGroup\", globalFilter));\r\n    }\r\n  }\r\n\r\n  const cancelUpdateMode = () => {\r\n    setServiceGroup({ ...serviceGroup, id: null });\r\n  }\r\n\r\n  const onServiceGroupSubmit = data => {\r\n    const formData = { name: data.serviceGroupName, description: data.serviceGroupDescription }\r\n    if (serviceGroup.id) {\r\n      dispatch(updateServiceGroup(formData, serviceGroup.id, \"updateServiceGroup\", globalFilter))\r\n    } else {\r\n      dispatch(createServiceGroup(formData, \"createServiceGroup\", globalFilter))\r\n    }\r\n  }\r\n\r\n  // Table Header\r\n  const renderHeader = () => {\r\n    return (\r\n      <div className=\"table-header\">\r\n        <span>\r\n          List of Service Groups\r\n        </span>\r\n        <form className=\"d-flex align-items-baseline\" >\r\n          <div className=\"p-input-icon-right searchInput-container-contact\">\r\n            <InputText className=\"p-mr-2 p-pr-5 contact-searchInput\" placeholder=\"Search all service groups\" value={globalFilter} onChange={(e) => setGlobalFilter(e.currentTarget.value)} />\r\n            {\r\n              globalFilter && loading !== \"searchServiceGroups\" &&\r\n              <i className=\"pi pi-times p-mr-2\" onClick={() => { setGlobalFilter(\"\"); dispatch(loadServiceGroups(page, pageLimit, \"loadServiceGroups\", \"\")) }} name=\"clear\" />\r\n            }\r\n          </div>\r\n          <Button onClick={handleServiceGroupSearch} type=\"submit\" icon=\"pi pi-search\" className=\"p-px-1 p-pt-1 p-pb-2\" loading={loading === \"searchServiceGroups\"} />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  // Table Header\r\n\r\n  // Table Body\r\n  const header = renderHeader();\r\n\r\n  const SGActionTemplate = (rowData) =>\r\n    <div>\r\n      <i className=\"pi pi-pencil p-pr-3\" onClick={() => handleServiceGroupEdit(rowData, rowData.id)} />\r\n      {\r\n        serviceGroupToDelete !== rowData.id &&\r\n        <i className=\"pi pi-trash\" onClick={() => handleServiceGroupDelete(rowData.id, rowData.name)} />\r\n      }\r\n      {\r\n        serviceGroupToDelete === rowData.id &&\r\n        <i className=\"pi pi-spinner pi-spin\" />\r\n      }\r\n    </div>\r\n\r\n  const getSGTableData = (data) => {\r\n    return (\r\n      <>\r\n        <DataTable value={data} header={header} className=\"p-datatable-header-admin\" dataKey=\"id\" rowHover>\r\n          <Column field=\"name\" header=\"Name\"></Column>\r\n          <Column field=\"description\" header=\"Description\"></Column>\r\n          <Column header=\"Actions\" body={SGActionTemplate}></Column>\r\n        </DataTable>\r\n        <Paginator first={totalCapacity} rows={pageLimit} totalRecords={serviceGroups?.meta?.total} rowsPerPageOptions={[10, 20, 50]} onPageChange={onPaginationChange}></Paginator>\r\n      </>\r\n    )\r\n  }\r\n  // Table Body\r\n\r\n  return (\r\n    <>\r\n      <div className=\"p-grid p-mx-lg-0 grid-margin p-py-1 p-mt-2\">\r\n        <div className=\"p-col-12 p-lg-8 p-p-lg-1 p-py-0\">\r\n          <div className=\"p-card h-100 p-mt-2\">\r\n            <div className=\"p-card-body p-p-0\">\r\n              {getSGTableData(serviceGroups.data)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"p-col-12 p-lg-4 p-p-lg-1\">\r\n          <div className=\"p-card h-100 p-mt-2 text-center\">\r\n            <div className=\"p-card-title p-px-3 p-pt-4\">\r\n              <div className=\"d-flex justify-content-end\">\r\n              </div>\r\n            </div>\r\n            <div className=\"p-card-body svgimage p-pt-0\">\r\n              <form onSubmit={handleServiceGroupSubmit(onServiceGroupSubmit)}>\r\n                <div className=\"p-fluid p-formgrid p-grid\">\r\n                  <div className=\"p-field p-col-12 p-md-12 \">\r\n                    <label className=\"inputLabel\" htmlFor=\"serviceGroupName\">\r\n                      Service Group Name\r\n                          <span className=\"text-danger p-ml-2 font-weight-bold\">\r\n                        {serviceGroupErrors?.name?.message}\r\n                      </span>\r\n                    </label>\r\n                    <CustomInputField\r\n                      id=\"serviceGroupName\"\r\n                      name=\"serviceGroupName\"\r\n                      inputLabel=\"Service Group\"\r\n                      register={serviceGroupRegister}\r\n                      inputChange={handleServiceGroupChange}\r\n                      value={serviceGroup.name}\r\n                    />\r\n                  </div>\r\n                  <div className=\"p-field p-col-12 p-md-12\">\r\n                    <label className=\"inputLabel\" htmlFor=\"serviceGroupDescription\">\r\n                      Service Group Description\r\n                          <span className=\"text-danger p-ml-2 font-weight-bold\">\r\n                        {serviceGroupErrors?.description?.message}\r\n                      </span>\r\n                    </label>\r\n                    <CustomInputField\r\n                      id=\"serviceGroupDescription\"\r\n                      name=\"serviceGroupDescription\"\r\n                      inputLabel=\"Description\"\r\n                      register={serviceGroupRegister}\r\n                      inputChange={handleServiceGroupChange}\r\n                      value={serviceGroup.description}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <Button\r\n                  type=\"submit\"\r\n                  iconPos=\"left\"\r\n                  className=\"p-py-1 submitButton-admin\"\r\n                  label={serviceGroup.id ? \"Update\" : \"Create\"}\r\n                  loading={loading === \"updateServiceGroup\" || loading === \"createServiceGroup\"}\r\n                />\r\n                {\r\n                  serviceGroup.id &&\r\n                  <Button\r\n                    type=\"button\"\r\n                    iconPos=\"left\"\r\n                    label=\"Cancel\"\r\n                    disabled={loading === \"updateServiceGroup\" || loading === \"createServiceGroup\"}\r\n                    className=\"p-ml-2 p-py-1\"\r\n                    onClick={() => cancelUpdateMode()}\r\n                  />\r\n                }\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AdminServiceGroups;","import { Button } from \"primereact/button\"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport CustomInputField from \"components/CustomInputField\";\r\nimport { Paginator } from 'primereact/paginator';\r\nimport { AutoComplete } from 'primereact/autocomplete';\r\nimport { createService, deleteService, loadServices, updateService, loadServiceGroupsForServiceComponent } from \"store/modules/admin\";\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport \"./Admin.css\";\r\n\r\nconst AdminServices = () => {\r\n  const dispatch = useDispatch();\r\n  const services = useSelector((state) => state.admin.services);\r\n  const loading = useSelector(state => state.admin.adminLoading);\r\n  const serviceGroupOptionsByPage = useSelector((state) => state.admin.serviceGroupsForServiceComponent);\r\n  const [page, setPage] = useState(1);\r\n  const [service, setService] = useState({});\r\n  const [pageLimit, setPageLimit] = useState(10);\r\n  const [globalFilter, setGlobalFilter] = useState(\"\");\r\n  const [totalCapacity, setTotalCapacity] = useState(0);\r\n  const [serviceToDelete, setServiceToDelete] = useState(\"\");\r\n  const [serviceGroupOptions, setServiceGroupOptions] = useState([]);\r\n  const [selectedServiceGroupOption, setSelectedServiceGroupOption] = useState(null);\r\n\r\n  // React hook form\r\n  const {\r\n    register: serviceRegister,\r\n    handleSubmit: handleServiceSubmit,\r\n    setValue: setServiceValue,\r\n    formState: { errors: serviceErrors },\r\n    clearErrors: clearServiceErrors,\r\n  } = useForm({ mode: \"onChange\", reValidateMode: \"onChange\" });\r\n  // React hook form\r\n\r\n  const onPaginationChange = (event) => {\r\n    setTotalCapacity(event.first);\r\n    setPageLimit(event.rows);\r\n    dispatch(loadServices(event.page + 1, event.rows, \"loadServices\", globalFilter));\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    // clear service group if a service group has been created or updated\r\n    if (loading === \"createServiceGroup\" || loading === \"updateServiceGroup\") {\r\n      setSelectedServiceGroupOption(null);\r\n      setServiceValue('groupId', \"\");\r\n    }\r\n    //clear serviceToDelete if error deleting service\r\n    if (!loading) {\r\n      setServiceToDelete(null);\r\n    }\r\n  }, [loading]);\r\n\r\n  useEffect(() => {\r\n    dispatch(loadServices(page, pageLimit, \"loadServices\", globalFilter));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    //correct pagination on delete or create of service\r\n    setTotalCapacity((services?.meta?.page - 1) * services?.meta?.limit);\r\n    setPage(services?.meta?.page)\r\n  }, [services])\r\n\r\n  useEffect(() => {\r\n    // create array for service group autocomplete dropdown\r\n    const newArray = [];\r\n    serviceGroupOptionsByPage?.data?.map((serviceGroup) => { newArray.push({ group: serviceGroup.name, groupId: serviceGroup.id }) })\r\n    setServiceGroupOptions(newArray);\r\n  }, [serviceGroupOptionsByPage]);\r\n\r\n  const handleServiceEdit = (data, id) => {\r\n    clearServiceErrors();\r\n    setService({ ...service, name: data.name, id: id, description: data.description, serviceGroup: { group: data.groupName, groupId: data.groupId } });\r\n    setSelectedServiceGroupOption({ group: data.group, groupId: data.groupId })\r\n\r\n    //set values in react hook\r\n    setServiceValue('name', data.name);\r\n    setServiceValue('description', data.description);\r\n    setServiceValue('groupId', data.groupId);\r\n  }\r\n\r\n  const handleServiceSearch = () => {\r\n    dispatch(loadServices(page, pageLimit, \"searchServices\", globalFilter));\r\n  }\r\n\r\n  const handleServiceDelete = (id, name) => {\r\n    var confirm = window.confirm(`Do you want to delete the service \"${name}\"?`)\r\n    if (confirm && id) {\r\n      setServiceToDelete(id);\r\n      if (service.id === id) {\r\n        //change update form to create form if update form has service id of deleted service\r\n        setService({ ...service, id: null });\r\n      }\r\n      dispatch(deleteService(id));\r\n    }\r\n  }\r\n\r\n  const cancelUpdateMode = () => {\r\n    setService({ ...service, id: null });\r\n  }\r\n\r\n  const searchServiceGroups = (e) => {\r\n    const searchValue = e.query ? e.query : \"\";\r\n    dispatch(loadServiceGroupsForServiceComponent(1, 10, \"searchServiceGroupsForService\", searchValue))\r\n  }\r\n\r\n  const handleServiceChange = e => {\r\n    setService({ ...service, [e.target.name]: e.target.value });\r\n    setServiceValue(e.target.name, e.target.value, { shouldValidate: true });\r\n  }\r\n\r\n  const handleServiceGroupChange = e => {\r\n    setSelectedServiceGroupOption(e.value);\r\n    setServiceValue(e.target.name, e.value, { shouldValidate: true });\r\n  }\r\n\r\n  const onServiceSubmit = (data) => {\r\n    data.groupId = selectedServiceGroupOption.groupId;\r\n    if (service.id) {\r\n      dispatch(updateService(data, service.id, \"updateService\", globalFilter));\r\n    } else {\r\n      dispatch(createService(data, \"createService\"));\r\n    }\r\n  }\r\n\r\n  // Table Header\r\n  const renderHeader = () => {\r\n    return (\r\n      <div className=\"table-header\">\r\n        <span>\r\n          List of Services\r\n        </span>\r\n        <form className=\"d-flex align-items-baseline\">\r\n          <div className=\"p-input-icon-right searchInput-container-contact\">\r\n            <InputText className=\"p-mr-2 p-pr-5 contact-searchInput\" placeholder=\"Search all services\" value={globalFilter} onChange={(e) => setGlobalFilter(e.currentTarget.value)} />\r\n            {\r\n              globalFilter && loading !== \"searchServices\" &&\r\n              <i className=\"pi pi-times p-mr-2\" onClick={() => { setGlobalFilter(\"\"); dispatch(loadServices(page, pageLimit, \"loadServices\", \"\")) }} name=\"clear\" />\r\n            }\r\n          </div>\r\n          <Button onClick={handleServiceSearch} type=\"submit\" icon=\"pi pi-search\" className=\"p-px-1 p-pt-1 p-pb-2\" loading={loading === \"searchServices\"} />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  // Table Header\r\n\r\n  // Table Body\r\n  const header = renderHeader();\r\n\r\n  const SActionTemplate = (rowData) =>\r\n    <div>\r\n      <i className=\"pi pi-pencil p-pr-3\" onClick={() => handleServiceEdit(rowData, rowData.id)} />\r\n      {\r\n        serviceToDelete !== rowData.id &&\r\n        <i className=\"pi pi-trash\" onClick={() => handleServiceDelete(rowData.id, rowData.name)} />\r\n      }\r\n      {\r\n        serviceToDelete === rowData.id &&\r\n        <i className=\"pi pi-spinner pi-spin\" />\r\n      }\r\n    </div>\r\n\r\n  const getSTableData = (data) => {\r\n    return (\r\n      <>\r\n        <DataTable value={data}\r\n          header={header} className=\"p-datatable-header-admin\" dataKey=\"id\" rowHover\r\n        >\r\n          <Column field=\"name\" header=\"Name\"></Column>\r\n          <Column field=\"description\" header=\"Description\"></Column>\r\n          <Column field=\"group\" header=\"Service Group\"></Column>\r\n          <Column header=\"Actions\" body={SActionTemplate}></Column>\r\n        </DataTable>\r\n        <Paginator first={totalCapacity} rows={pageLimit} totalRecords={services?.meta?.total} rowsPerPageOptions={[10, 20, 50]} onPageChange={onPaginationChange}></Paginator>\r\n      </>\r\n    )\r\n  }\r\n  // Table Body\r\n\r\n  return (\r\n    <>\r\n      <div className=\"p-grid p-mx-lg-0 grid-margin p-py-1\">\r\n        <div className=\"p-col-12 p-lg-8 p-p-lg-1 p-py-0\">\r\n          <div className=\"p-card h-100 p-mt-2\">\r\n            <div className=\"p-card-body p-p-0\">\r\n              {getSTableData(services.data)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"p-col-12 p-lg-4 p-p-lg-1\">\r\n          <div className=\"p-card h-100 p-mt-2 text-center\">\r\n            <div className=\"p-card-title p-px-10 p-pt-4\">\r\n              <div className=\"d-flex justify-content-end\">\r\n              </div>\r\n            </div>\r\n            <div className=\"p-card-body svgimage p-pt-0\">\r\n              <form onSubmit={handleServiceSubmit(onServiceSubmit)}>\r\n                <div className=\"p-fluid p-formgrid p-grid\">\r\n                  <div className=\"p-field p-col-12 p-md-12 \">\r\n                    <label className=\"inputLabel\" htmlFor=\"name\">\r\n                      Service Name\r\n                          <span className=\"text-danger p-ml-2 font-weight-bold\">\r\n                        {serviceErrors?.name?.message}\r\n                      </span>\r\n                    </label>\r\n                    <CustomInputField\r\n                      id=\"name\"\r\n                      name=\"name\"\r\n                      inputLabel=\"Service\"\r\n                      register={serviceRegister}\r\n                      inputChange={handleServiceChange}\r\n                      value={service.name}\r\n                    />\r\n                  </div>\r\n                  <div className=\"p-field p-col-12 p-md-12\">\r\n                    <label className=\"inputLabel\" htmlFor=\"description\">\r\n                      Service Description\r\n                        <span className=\"text-danger p-ml-2 font-weight-bold\">\r\n                        {serviceErrors?.description?.message}\r\n                      </span>\r\n                    </label>\r\n                    <CustomInputField\r\n                      id=\"description\"\r\n                      name=\"description\"\r\n                      inputLabel=\"Description\"\r\n                      register={serviceRegister}\r\n                      inputChange={handleServiceChange}\r\n                      value={service.description}\r\n                    />\r\n                  </div>\r\n                  <div className=\"p-field p-col-12 p-md-12\">\r\n                    <label className=\"inputLabel\" htmlFor=\"groupId\">\r\n                      Service Group\r\n                        <span className=\"text-danger p-ml-2 font-weight-bold\">\r\n                        {serviceErrors?.groupId?.message}\r\n                      </span>\r\n                    </label>\r\n                    <div className=\"p-mt-1 text-left\">\r\n                      <AutoComplete\r\n                        field=\"group\"\r\n                        dropdown\r\n                        forceSelection\r\n                        dropdownMode=\"current\"\r\n                        suggestions={serviceGroupOptions}\r\n                        value={selectedServiceGroupOption}\r\n                        placeholder=\"Search and select a service group\"\r\n                        {\r\n                        ...serviceRegister\r\n                          (\"groupId\", {\r\n                            required: \" * Service Group is required\",\r\n                          })\r\n                        }\r\n                        onChange={handleServiceGroupChange}\r\n                        completeMethod={searchServiceGroups}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <Button\r\n                  type=\"submit\"\r\n                  iconPos=\"left\"\r\n                  className=\"submitButton-admin p-py-1\"\r\n                  label={service.id ? \"Update\" : \"Create\"}\r\n                  loading={loading === \"updateService\" || loading === \"createService\"}\r\n                />\r\n                {\r\n                  service.id &&\r\n                  <Button\r\n                    type=\"button\"\r\n                    iconPos=\"left\"\r\n                    label=\"Cancel\"\r\n                    disabled={loading === \"updateService\" || loading === \"createService\"}\r\n                    className=\"p-ml-2 p-py-1\"\r\n                    onClick={() => cancelUpdateMode()}\r\n                  />\r\n                }\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AdminServices;","import React from 'react';\r\nimport AdminServiceGroups from './AdminServiceGroups';\r\nimport AdminServices from './AdminServices';\r\n\r\nconst AdminServicesAndServiceGroups = () => {\r\n  return (\r\n    <div className=\"background-dashboard container\">\r\n      <div className=\"background-top\">\r\n      </div>\r\n      <div className=\"background-bottom\">\r\n        <h4 className=\"p-pb-2 p-mb-2\">\r\n          <i className=\"pi pi-chart-line p-pr-2\"></i>Services & Service Groups\r\n          </h4>\r\n        <AdminServices />\r\n        <AdminServiceGroups />\r\n      </div>\r\n    </div>)\r\n}\r\n\r\nexport default AdminServicesAndServiceGroups;"],"sourceRoot":""}