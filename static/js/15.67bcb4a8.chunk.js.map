{"version":3,"sources":["components/profile/SectionHeader.js","pages/instant-jobs/Recent_instant_Jobs.js","pages/instant-job-hire/instant-header.js","pages/instant-job-hire/Job.js","pages/instant-job-hire/Edit.js"],"names":["SectionHeader","openModalOnEdit","openModalOnCreate","deleteItem","hasData","sectionTitle","icon","id","showAddButton","showEditButton","showDeleteButton","isViewApplicant","className","onClick","RecentInstantJobs","dispatch","useDispatch","useState","page","take","copyAlert","setCopyAlert","allCurrentInstantJobs","useSelector","state","instantJob","console","log","useEffect","fetchAllInstantJobs","handleShareButton","e","jobId","currentTarget","dataset","el","document","createElement","value","window","location","host","body","appendChild","select","execCommand","removeChild","setTimeout","style","height","length","map","instantjob","flexWrap","src","borderRadius","alt","to","fontSize","service","str","description","no_words","split","splice","join","moment","createdAt","fromNow","data-id","InstantHeader","title","showCreateButton","showBack","count","showSearchBar","searchValue","setSearchValue","loading","contact","loadingContact","placeholder","onChange","inputValue","target","name","iconPos","label","type","Job","openCreate","openEdit","profileInfo","Categories","code","Edit","props","useForm","mode","reValidateMode","register","handleSubmit","errors","formState","setValue","desc","selectedCategory","setSelectedCategory","isJobDateNow","setIsJobDateNow","itemToEdit","setItemToEdit","loggedInUserId","agentService","Auth","current","instantJobId","match","params","loadInstantJob","startDate","Date","endDate","category","find","address","phoneNumber","handleOnChange","JSON","parse","shouldValidate","period","instantJobDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","onSubmit","data","toISOString","now","editInstantJob","htmlFor","options","optionLabel","filter","showClear","filterBy","required","message","defaultValue","checked","defaultChecked","disabled","onSelect","rows","cols"],"mappings":"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","file":"static/js/15.67bcb4a8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SectionHeader = ({\r\n  openModalOnEdit,\r\n  openModalOnCreate,\r\n  deleteItem,\r\n  hasData,\r\n  sectionTitle,\r\n  icon,\r\n  id,\r\n  showAddButton = false,\r\n  showEditButton = false,\r\n  showDeleteButton = false,\r\n  isViewApplicant = false\r\n}) => {\r\n\r\n\r\n  return (\r\n    <div className=\"sectionHeader\">\r\n      <div className=\"p-card-title\">\r\n        <span>\r\n          <i className={`pi pi-${icon}`}></i>\r\n          {sectionTitle}\r\n        </span>\r\n        {!isViewApplicant && <span>\r\n          {showAddButton && !hasData && (\r\n            <i className=\"pi pi-plus\" onClick={openModalOnCreate}></i>\r\n          )}\r\n          {showEditButton && hasData && (\r\n            <i className=\"pi pi-pencil\" onClick={openModalOnEdit} id={id}></i>\r\n          )}\r\n          {showDeleteButton && (\r\n            <i className=\"pi pi-trash\" onClick={deleteItem} id={id}></i>\r\n          )}\r\n        </span>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionHeader;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { fetchAllInstantJobs } from 'store/modules/instantJob';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\nimport \"../profile/UserProfile.css\";\r\nimport SectionHeader from \"components/profile/SectionHeader\";\r\n\r\nimport './Instant-Jobs.css';\r\n\r\n\r\nconst RecentInstantJobs = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [page, setPage] = useState(1);\r\n    const [take, setTake] = useState(10);\r\n    const [copyAlert, setCopyAlert] = useState(null);\r\n\r\n    const allCurrentInstantJobs = useSelector(state => state.instantJob.allCurrentInstantJobs);\r\n    console.log(\"allcurrentjob\", allCurrentInstantJobs)\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchAllInstantJobs(page, take))\r\n    }, [dispatch])\r\n\r\n    const handleShareButton = (e,) => {\r\n        const jobId = e.currentTarget.dataset.id;\r\n        const el = document.createElement('input');\r\n        el.value = window.location.host + `/instant-hire/view/${jobId}`;\r\n        document.body.appendChild(el);\r\n        el.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(el);\r\n        setCopyAlert(jobId);\r\n        setTimeout(function () { setCopyAlert(false); }, 1000);\r\n    }\r\n\r\n\r\n    function truncate(str, no_words) {\r\n        return str.split(\" \").splice(0, no_words).join(\" \");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"p-col-12 p-md-3 p-pt-2\">\r\n                <div className=\"p-card\">\r\n                    <SectionHeader\r\n                        icon=\"briefcase\"\r\n                        sectionTitle=\"Recent Instant Jobs\"\r\n                        id=\"portfolioEdit\"\r\n                        showEditButton=\"false\"\r\n                    />\r\n                    <div className=\"p-card-body p-grid p-mt-1 overflow-auto\" style={{ height: 500 }}>\r\n                        {allCurrentInstantJobs && allCurrentInstantJobs.length > 0 && allCurrentInstantJobs.map(instantjob =>\r\n                            <div key={instantjob.id} className=\"\" >\r\n                                <div className=\"panel-login text-center\"></div>\r\n                                <div className=\"highlight-card p-p-1\">\r\n                                    <div className=\"row \" style={{ flexWrap: \"nowrap !important\" }} >\r\n                                        <div className=\"col-3 rounded-circle\">\r\n                                            <img\r\n                                                src=\"https://source.unsplash.com/random/100x100\" style={{ borderRadius: \"50%\" }}\r\n                                                className=\"img-fluid\"\r\n                                                alt=\"user-image\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"col-9\">\r\n                                            <small >\r\n                                                <Link className=\"p-text-secondary\" to={`/instant-hire/view/${instantjob.id}`}>\r\n                                                    <p className=\"font-weight-bold\"> <span className=\"app-color text-capitalize\" style={{ fontSize: 15 }}> {instantjob.service}</span></p>\r\n                                                    <p className=\"font-weight-bold text-capitalize\">{instantjob.location} </p>\r\n                                                    <p><span className=\"font-weight-bold text-capitalize\"> </span> {`${truncate(instantjob.description, 20)} ${'...'}`}</p>\r\n                                                </Link>\r\n                                                <div className=\"d-flex justify-content-between\">\r\n                                                    <div>\r\n                                                        <p className=\"p-pt-2 float-right\"> {moment(instantjob.createdAt).fromNow()} </p>\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <div>\r\n                                                            <i className=\"pi pi-share-alt p-pt-2\" data-id={instantjob.id}\r\n                                                                onClick={handleShareButton}> Share\r\n                                                            </i>\r\n                                                        </div>\r\n                                                        <span className={copyAlert === instantjob.id ? \"job-copyModalAlert--active\" : \"job-copyModalAlert\"}>\r\n                                                            Link copied\r\n                                                        </span>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                            </small >\r\n                                        </div>\r\n                                        <hr />\r\n                                    </div>\r\n                                </div>\r\n                            </div>)}\r\n                        {\r\n                            allCurrentInstantJobs?.length === 0 && <strong className=\"mx-auto\">No Recent Job Yet</strong>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RecentInstantJobs;\r\n","\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'primereact/button';\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\nimport './InstantJobHire.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchAllInstantJobs } from 'store/modules/instantJob';\r\n\r\n\r\nconst InstantHeader = ({ title, showCreateButton = false, showBack = false, count, showSearchBar = false }) => {\r\n    const dispatch = useDispatch();\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n    const [page, setPage] = useState(1)\r\n    const [take, setTake] = useState(10)\r\n    const loading = useSelector(state => state.contact.loadingContact);\r\n\r\n\r\n\r\n\r\n    const handleSearchInputChange = (e) => {\r\n        const inputValue = e.target.name === \"clear\" ? \"\" : e.currentTarget.value;\r\n        if (inputValue) {\r\n            setSearchValue(inputValue);\r\n            dispatch(fetchAllInstantJobs(page, take));\r\n        }\r\n        else {\r\n            setSearchValue(\"\");\r\n            // dispatch(loadFreeUsers(1, 10, \"loadingFreeUsers\"))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <header className=\"instant d-flex\">\r\n                <div className=\"title-container w-100\"   >\r\n                    <h2 className=\"title sm-screen \">{title} {count > 0 && `(${count})`} </h2>\r\n                </div>\r\n\r\n                {showSearchBar && <div className=\"d-flex align-items-baseline\">\r\n                    <div className=\"p-input-icon-right searchInput-container-contact\">\r\n                        <div className=\"p-input-icon-left\">\r\n                            <i className=\"pi pi-search\" />\r\n                            <InputText className=\"p-mr-2 p-pr-5 contact-searchInput\" placeholder=\"Search instant jobs\" value={searchValue} onChange={handleSearchInputChange} />\r\n                        </div>\r\n                        {\r\n                            loading === \"searchUsers\" &&\r\n                            <i className=\"pi pi-spin pi-spinner p-mr-2\" />\r\n                        }\r\n                        {\r\n                            searchValue && loading !== \"searchUsers\" &&\r\n                            <i className=\"pi pi-times p-mr-2\" name=\"clear\" />\r\n                        }\r\n                    </div>\r\n                </div>}\r\n                <div className=\"flex-shrink-0\">\r\n                    {showCreateButton && <Link to=\"/create-instant-hire\"> <Button iconPos=\"left\" label=\"Create\" className=\"create-btn\" type=\"button\" /></Link>}\r\n                    {showBack && <Link to=\"/instant-hires\" className=\"bk-btn p-pt-2 app-color\"><i className=\"pi pi-arrow-left\">Back</i></Link>}\r\n                </div>\r\n            </header >\r\n            <hr className=\"font-weight-bolder appcolor\" />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default InstantHeader;","import React, { useState } from \"react\";\r\nimport { PROFILE } from \"constants/profile\";\r\n\r\nimport { Carousel } from 'primereact/carousel';\r\n\r\nimport \"../profile/UserProfile.css\";\r\nimport SectionHeader from \"components/profile/SectionHeader\";\r\nimport RecentInstantJobs from \"../instant-jobs/Recent_instant_Jobs\";\r\n\r\nconst Job = ({ openCreate, openEdit, profileInfo }) => {\r\n    const [portfolios, setPortfolios] = useState([]);\r\n\r\n    const expandImage = (e) => {\r\n        openEdit(PROFILE.PORTFOLIO_MODAL);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"p-col-12 p-md-3 p-pt-2\">\r\n                <div className=\"p-card\">\r\n                    <SectionHeader\r\n                        icon=\"briefcase\"\r\n                        sectionTitle=\"Instant Jobs\"\r\n                        id=\"portfolioEdit\"\r\n                        // showAddButton=\"false\"\r\n                        showEditButton=\"false\"\r\n\r\n                    />\r\n                    <div className=\"p-card-body p-grid p-mt-2\">\r\n                        {/* <RecentInstantJobs /> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Job;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Button } from 'primereact/button';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport InstantHeader from './instant-header';\r\nimport { ConfirmDialog, confirmDialog } from 'primereact/confirmdialog';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createInstantJob, editInstantJob, loadInstantJob } from 'store/modules/instantJob';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport Job from './Job';\r\n\r\nimport './InstantJobHire.css'\r\nimport moment from 'moment';\r\nimport { Redirect } from 'react-router';\r\nimport agentService from 'services/agent.service';\r\n\r\nconst Categories = [\r\n    { name: 'Machine', code: 'Mec' },\r\n    { name: 'Plumber', code: 'Plu' },\r\n    { name: 'Tailor', code: 'Tai' },\r\n    { name: 'chef', code: 'chef' },\r\n    { name: 'Dry-cleaners', code: 'Lan' },\r\n    { name: 'Painter', code: 'Pai' },\r\n    { name: 'Janitor', code: 'Jan' },\r\n    { name: 'Massage', code: 'Mas' },\r\n\r\n];\r\n\r\nconst Edit = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { register, handleSubmit, formState: { errors }, setValue } = useForm({\r\n        mode: \"onChange\",\r\n        reValidateMode: \"onChange\"\r\n    });\r\n\r\n    const [desc, setDesc] = useState('');\r\n    const [selectedCategory, setSelectedCategory] = useState(null);\r\n    const [isJobDateNow, setIsJobDateNow] = useState(false);\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [itemToEdit, setItemToEdit] = useState({});\r\n\r\n    const instantjob = useSelector(state => state.instantJob.instantjob);\r\n    const loading = useSelector(state => state.instantJob.loading);\r\n    console.log(\"instantjob =>\", instantjob);\r\n\r\n    const loggedInUserId = agentService.Auth.current().id\r\n    console.log(\"loggedInUserId\", loggedInUserId);\r\n\r\n    const instantJobId = props.match.params.id;\r\n    console.log({ itemToEdit })\r\n\r\n    useEffect(() => {\r\n        dispatch(loadInstantJob(instantJobId))\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        setItemToEdit(instantjob)\r\n        if (itemToEdit) {\r\n            itemToEdit.startDate = new Date(itemToEdit.startDate);\r\n            itemToEdit.endDate = new Date(itemToEdit.endDate);\r\n            let category = Categories.find(category => category.name === itemToEdit.service);\r\n            setSelectedCategory(category)\r\n            console.log(\"category\", category)\r\n\r\n            setValue(\"service\", itemToEdit.service);\r\n            setValue(\"location\", itemToEdit.location);\r\n            setValue(\"address\", itemToEdit.address);\r\n            setValue(\"phoneNumber\", itemToEdit.phoneNumber);\r\n            setValue(\"endDate\", itemToEdit.endDate);\r\n            setValue(\"startDate\", itemToEdit.startDate);\r\n            setValue(\"description\", itemToEdit.description);\r\n        }\r\n    }, [instantjob, itemToEdit])\r\n\r\n\r\n\r\n    const handleOnChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setItemToEdit({ ...itemToEdit, [name]: value ?? JSON.parse(value) });\r\n        setValue(name, value, { shouldValidate: true });\r\n\r\n    }\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n\r\n        setSelectedCategory(e.value);\r\n        setValue(name, value, { shouldValidate: true });\r\n    };\r\n\r\n    // const toggleJobDate = (e) => {\r\n    //     if (e.target.checked) {\r\n    //         let period = new Date();\r\n    //         let instantJobDate = period.getUTCFullYear() + \"/\" + (period.getUTCMonth() + 1) + \"/\" + period.getUTCDate() + \" \" + period.getUTCHours() + \":\" + period.getUTCMinutes() + \":\" + period.getUTCSeconds();\r\n    //         setValue(\"jobDate\", instantJobDate, { shouldValidate: true })\r\n    //         setJobDateNow(true);\r\n    //         console.log({ instantJobDate });\r\n\r\n    //     } else {\r\n    //         setValue(\"jobDate\", \" \", { shouldValidate: true })\r\n    //         setJobDateNow(false);\r\n    //     }\r\n    // }\r\n\r\n\r\n    let period = new Date();\r\n    let instantJobDate = period.getUTCFullYear() + \"/\" + (period.getUTCMonth() + 1) + \"/\" + period.getUTCDate() + \" \" + period.getUTCHours() + \":\" + period.getUTCMinutes() + \":\" + period.getUTCSeconds();\r\n\r\n    const toggleJobDate = (e) => {\r\n        if (e.target.checked) {\r\n            setValue(\"startDate\", instantJobDate, { shouldValidate: true })\r\n            // setValue(\"time\", new Date().toLocaleTimeString(), { shouldValidate: false })\r\n\r\n            console.log(\"instant job => \", instantJobDate)\r\n            setIsJobDateNow(true);\r\n        } else {\r\n            setValue(\"startDate\", \"\", { shouldValidate: true })\r\n            setIsJobDateNow(!isJobDateNow);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (data) => {\r\n        if (isJobDateNow) {\r\n            data.startDate = new Date().toISOString()\r\n            data.now = true;\r\n        } else {\r\n            data.now = false;\r\n        }\r\n        data.service = data.service.name;\r\n        dispatch(editInstantJob(instantJobId, data, \"loading\"));\r\n    }\r\n    // if (instantjob.accountId !== loggedInUserId) {\r\n    //     return <Redirect to={\"/instant-jobs\"} />\r\n    // }\r\n\r\n    return (\r\n\r\n        <>\r\n            <div className=\"background instant\" >\r\n                <div className=\"content-container\">\r\n                    <div className=\"p-grid\">\r\n                        <div className=\"p-col-12 p-md-9\">\r\n                            <div className=\"card card-size-list\">\r\n                                <div className=\"card-body\">\r\n\r\n                                    <InstantHeader\r\n                                        title=\"Edit instant hire\"\r\n                                        showBack={true}\r\n                                    />\r\n                                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"p-fluid p-md-6 p-sm-12\">\r\n                                                <div className=\"p-field\">\r\n                                                    <label htmlFor=\"service\"> Job Service *</label>\r\n                                                    <Dropdown\r\n                                                        options={Categories}\r\n                                                        optionLabel=\"name\"\r\n                                                        filter\r\n                                                        showClear\r\n                                                        filterBy=\"name\"\r\n                                                        icon=\"pi pi-plus\"\r\n                                                        id=\"service\"\r\n                                                        name=\"service\"\r\n                                                        value={selectedCategory}\r\n                                                        {...register(\"service\", { required: `Please Select a service` })}\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                    {errors.service && <span className=\"text-danger font-weight-bold \"> <p>{errors.service.message}</p>\r\n                                                    </span>}\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                            <div className=\"p-fluid p-md-6 p-sm-12\">\r\n                                                <div className=\"p-field\">\r\n                                                    <label htmlFor=\"location\">Location * </label>\r\n                                                    <InputText\r\n                                                        type=\"text\"\r\n                                                        placeholder=\"Location\"\r\n                                                        name=\"location\"\r\n                                                        defaultValue={itemToEdit?.location}\r\n                                                        onChange={(e) => handleOnChange(e)}\r\n\r\n                                                        {...register(\"location\", { required: \"Location is required\" })}\r\n                                                    />\r\n                                                    {errors.location && <span className=\"text-danger font-weight-bold \"> <p>{errors.location.message}</p>\r\n                                                    </span>}\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div className=\"p-fluid p-md-6 p-sm-12\">\r\n                                                <div className=\"p-field\">\r\n                                                    <label htmlFor=\"address\">Meet Up Location * </label>\r\n                                                    <InputText\r\n                                                        type=\"text\"\r\n                                                        placeholder=\"Address\"\r\n                                                        name=\"address\"\r\n                                                        defaultValue={itemToEdit?.address}\r\n                                                        onChange={(e) => handleOnChange(e)}\r\n                                                        {...register(\"address\", { required: \"Address is required\" })}\r\n                                                    />\r\n                                                    {errors.address && <span className=\"text-danger font-weight-bold \"> <p>{errors.address.message}</p>\r\n                                                    </span>}\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div className=\"p-fluid p-md-6 p-sm-12\">\r\n                                                <div className=\"p-field\">\r\n                                                    <label htmlFor=\"phoneNumber\">Phone Number * </label>\r\n                                                    <InputText\r\n                                                        type=\"number\"\r\n                                                        placeholder=\"Phone Number\"\r\n                                                        name=\"phoneNumber\"\r\n                                                        defaultValue={itemToEdit.phoneNumber}\r\n                                                        onChange={(e) => handleOnChange(e)}\r\n                                                        {...register(\"phoneNumber\", { required: \"Phone Number is required\" })}\r\n\r\n                                                    />\r\n\r\n                                                    {errors.address && <span className=\"text-danger font-weight-bold \"> <p>{errors.phoneNumber.message}</p>\r\n                                                    </span>}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"p-fluid p-md-6 p-sm-12\">\r\n\r\n                                                <div className=\"p-field\">\r\n                                                    <label htmlFor=\"startDate\">  Start Date * &nbsp;\r\n                                                        ( <input type=\"checkbox\" onClick={toggleJobDate} name=\"instance\" defaultChecked={isJobDateNow}\r\n                                                            className=\"align-text-bottom\" />\r\n                                                        <small className=\"font-weight-bold\"> NOW </small>  )  &nbsp; {isJobDateNow && (<span className=\"appcolor text-white px-3\"> {instantJobDate}</span>)}\r\n                                                    </label>\r\n                                                    <Calendar\r\n                                                        id=\"startDate\"\r\n                                                        type=\"date\"\r\n                                                        value={itemToEdit?.startDate}\r\n                                                        disabled={isJobDateNow}\r\n                                                        name=\"startDate\"\r\n                                                        {...register(\"startDate\", {\r\n                                                            required: `Start Date is required`,\r\n                                                        })}\r\n                                                        onSelect={(e) => {\r\n                                                            const inputName = \"startDate\";\r\n                                                            const value = new Date(e.value).toISOString();\r\n                                                            setValue(inputName, value, { shouldValidate: true });\r\n                                                        }}\r\n                                                        name=\"startDate\"\r\n                                                        {...register(\"startDate\", { required: `Start date is required` })}\r\n                                                    />\r\n                                                    {errors.startDate && <span className=\"text-danger font-weight-bold \"> <p>{errors.startDate.message}</p>\r\n                                                    </span>}\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div className=\"p-fluid p-md-6 p-sm-12\">\r\n                                                <div className=\"p-field\">\r\n                                                    <label htmlFor=\"endDate\">End Date * </label>\r\n                                                    <Calendar\r\n                                                        id=\"endDate\"\r\n                                                        type=\"date\"\r\n                                                        value={itemToEdit?.endDate}\r\n                                                        name=\"endDate\"\r\n                                                        {...register(\"endDate\", {\r\n                                                            required: `End Date is required`,\r\n                                                        })}\r\n                                                        onSelect={(e) => {\r\n                                                            const inputName = \"endDate\";\r\n                                                            const value = new Date(e.value).toISOString();\r\n                                                            setValue(inputName, value, { shouldValidate: true });\r\n                                                        }}\r\n                                                        name=\"endDate\"{...register(\"endDate\", { required: `* End date is required` })}\r\n                                                    />\r\n                                                    {errors.endDate && (<span className=\"text-danger font-weight-bold\">&nbsp; {errors.endDate.message}</span>)}\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            {/* {!isJobDateNow && <div className=\"p-fluid p-md-6 p-sm-12\">\r\n                                                <div className=\"p-field\">\r\n                                                    <label htmlFor=\"lastname\"> Time *</label>\r\n                                                    <InputText type=\"time\"\r\n                                                        placeholder=\"Time\"\r\n                                                        value={itemToEdit?.time}\r\n                                                        name=\"time\"\r\n                                                        onChange={(e) => handleOnChange(e)}\r\n                                                        {...register(\"time\", { required: \"Time is required\" })}\r\n                                                    />\r\n                                                    {errors.time && <span className=\"text-danger font-weight-bold \"> <p>{errors.time.message}</p>\r\n                                                    </span>}\r\n                                                </div>\r\n                                            </div>} */}\r\n                                            <div className=\"p-fluid p-md-12 p-sm-12\">\r\n                                                <div className=\"p-field\">\r\n                                                    <label htmlFor=\"description\"> Description *</label>\r\n                                                    <InputTextarea\r\n                                                        defaultValue={desc}\r\n                                                        // onChange={(e) => setDesc(e.target.value)}\r\n                                                        rows={3}\r\n                                                        cols={30}\r\n                                                        placeholder=\"Job Description\"\r\n                                                        defaultValue={itemToEdit?.description}\r\n                                                        onChange={(e) => handleOnChange(e)}\r\n                                                        name=\"description\"\r\n                                                        {...register(\"description\", { required: \"Description is required\" })}\r\n                                                    />\r\n                                                    {errors.description && <span className=\"text-danger font-weight-bold \"> <p>{errors.description.message}</p>\r\n                                                    </span>}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <Button icon=\"pi pi-check\"\r\n                                            iconPos=\"left\"\r\n                                            // label=\"Submit\"\r\n                                            label={loading === \"loading\" ? \"Please wait...\" : \"Update\"}\r\n                                            // id=\"saveButton\"\r\n                                            type=\"submit\"\r\n                                            className=\"float-right\" />\r\n                                    </form>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <Job />\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Edit;\r\n"],"sourceRoot":""}